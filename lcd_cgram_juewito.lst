CCS PCM C Compiler, Version 5.025, 12197               03-feb.-23 17:17

               Filename:   C:\Users\LAPTOP\Documents\ESTUDIOS\universidad\Proyectos en C\juewitodino\lcd_cgram_juewito.lst

               ROM used:   1507 words (18%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           49 (13%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4AF
0003:  NOP
.................... // Proyecto de Lcd , Tercera  practica. realizado por Mi . Jesus Monsalve 
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA E8,37
0005:  DATA EC,34
0006:  DATA 73,00
0007:  DATA 30,18
0008:  DATA 30,18
0009:  DATA 30,18
000A:  DATA 30,18
000B:  DATA 30,18
000C:  DATA 30,18
000D:  DATA 30,18
000E:  DATA 30,00
000F:  DATA 0C,00
0010:  DATA 0C,00
0011:  DATA C4,20
0012:  DATA CC,22
0013:  DATA A0,20
0014:  DATA 4C,10
0015:  DATA C2,27
0016:  DATA D4,27
0017:  DATA CE,10
0018:  DATA 00,01
0019:  DATA 0C,00
001A:  DATA C4,20
001B:  DATA CC,22
001C:  DATA A0,20
001D:  DATA 4C,10
001E:  DATA C2,27
001F:  DATA D4,27
0020:  DATA CE,10
0021:  DATA 00,01
0022:  DATA D9,27
0023:  DATA A0,29
0024:  DATA 45,10
0025:  DATA 51,10
0026:  DATA D1,2A
0027:  DATA C9,22
0028:  DATA D2,22
0029:  DATA D3,10
002A:  DATA 21,00
002B:  DATA 0C,00
002C:  DATA C1,2C
002D:  DATA D9,2C
002E:  DATA 20,28
002F:  DATA 41,28
0030:  DATA C1,20
0031:  DATA A1,10
0032:  DATA 20,2C
0033:  DATA 44,00
0034:  DATA 41,29
0035:  DATA D2,20
0036:  DATA CE,21
0037:  DATA C1,26
0038:  DATA CF,29
0039:  DATA 00,01
003A:  DATA 0C,00
003B:  DATA D0,1E
003C:  DATA 00,01
*
018E:  MOVF   0B,W
018F:  MOVWF  24
0190:  BCF    0B.7
0191:  BSF    03.5
0192:  BSF    03.6
0193:  BSF    0C.7
0194:  BSF    0C.0
0195:  NOP
0196:  NOP
0197:  BCF    03.5
0198:  BCF    03.6
0199:  BTFSC  24.7
019A:  BSF    0B.7
019B:  BSF    03.6
019C:  MOVF   0C,W
019D:  ANDLW  7F
019E:  BTFSC  03.2
019F:  GOTO   1E2
01A0:  BCF    03.6
01A1:  MOVWF  24
01A2:  BSF    03.6
01A3:  MOVF   0D,W
01A4:  BCF    03.6
01A5:  MOVWF  25
01A6:  BSF    03.6
01A7:  MOVF   0F,W
01A8:  BCF    03.6
01A9:  MOVWF  26
01AA:  MOVF   24,W
01AB:  MOVWF  2E
01AC:  CALL   162
01AD:  MOVF   25,W
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  BCF    03.6
01B1:  MOVF   26,W
01B2:  BSF    03.6
01B3:  MOVWF  0F
01B4:  BCF    03.6
01B5:  MOVF   0B,W
01B6:  MOVWF  27
01B7:  BCF    0B.7
01B8:  BSF    03.5
01B9:  BSF    03.6
01BA:  BSF    0C.7
01BB:  BSF    0C.0
01BC:  NOP
01BD:  NOP
01BE:  BCF    03.5
01BF:  BCF    03.6
01C0:  BTFSC  27.7
01C1:  BSF    0B.7
01C2:  BSF    03.6
01C3:  RLF    0C,W
01C4:  RLF    0E,W
01C5:  ANDLW  7F
01C6:  BTFSC  03.2
01C7:  GOTO   1E2
01C8:  BCF    03.6
01C9:  MOVWF  24
01CA:  BSF    03.6
01CB:  MOVF   0D,W
01CC:  BCF    03.6
01CD:  MOVWF  25
01CE:  BSF    03.6
01CF:  MOVF   0F,W
01D0:  BCF    03.6
01D1:  MOVWF  26
01D2:  MOVF   24,W
01D3:  MOVWF  2E
01D4:  CALL   162
01D5:  MOVF   25,W
01D6:  BSF    03.6
01D7:  MOVWF  0D
01D8:  BCF    03.6
01D9:  MOVF   26,W
01DA:  BSF    03.6
01DB:  MOVWF  0F
01DC:  INCF   0D,F
01DD:  BTFSC  03.2
01DE:  INCF   0F,F
01DF:  BCF    03.6
01E0:  GOTO   18E
01E1:  BSF    03.6
01E2:  BCF    03.6
01E3:  RETURN
*
0247:  BTFSC  03.1
0248:  GOTO   24C
0249:  MOVLW  47
024A:  MOVWF  04
024B:  BCF    03.7
024C:  CLRF   77
024D:  CLRF   78
024E:  CLRF   79
024F:  CLRF   7A
0250:  CLRF   47
0251:  CLRF   48
0252:  CLRF   49
0253:  CLRF   4A
0254:  MOVF   46,W
0255:  IORWF  45,W
0256:  IORWF  44,W
0257:  IORWF  43,W
0258:  BTFSC  03.2
0259:  GOTO   28A
025A:  MOVLW  20
025B:  MOVWF  4B
025C:  BCF    03.0
025D:  RLF    3F,F
025E:  RLF    40,F
025F:  RLF    41,F
0260:  RLF    42,F
0261:  RLF    47,F
0262:  RLF    48,F
0263:  RLF    49,F
0264:  RLF    4A,F
0265:  MOVF   46,W
0266:  SUBWF  4A,W
0267:  BTFSS  03.2
0268:  GOTO   273
0269:  MOVF   45,W
026A:  SUBWF  49,W
026B:  BTFSS  03.2
026C:  GOTO   273
026D:  MOVF   44,W
026E:  SUBWF  48,W
026F:  BTFSS  03.2
0270:  GOTO   273
0271:  MOVF   43,W
0272:  SUBWF  47,W
0273:  BTFSS  03.0
0274:  GOTO   284
0275:  MOVF   43,W
0276:  SUBWF  47,F
0277:  MOVF   44,W
0278:  BTFSS  03.0
0279:  INCFSZ 44,W
027A:  SUBWF  48,F
027B:  MOVF   45,W
027C:  BTFSS  03.0
027D:  INCFSZ 45,W
027E:  SUBWF  49,F
027F:  MOVF   46,W
0280:  BTFSS  03.0
0281:  INCFSZ 46,W
0282:  SUBWF  4A,F
0283:  BSF    03.0
0284:  RLF    77,F
0285:  RLF    78,F
0286:  RLF    79,F
0287:  RLF    7A,F
0288:  DECFSZ 4B,F
0289:  GOTO   25C
028A:  MOVF   47,W
028B:  MOVWF  00
028C:  INCF   04,F
028D:  MOVF   48,W
028E:  MOVWF  00
028F:  INCF   04,F
0290:  MOVF   49,W
0291:  MOVWF  00
0292:  INCF   04,F
0293:  MOVF   4A,W
0294:  MOVWF  00
0295:  RETURN
0296:  CLRF   78
0297:  CLRF   79
0298:  CLRF   77
0299:  CLRF   7A
029A:  MOVF   3A,W
029B:  BTFSS  03.2
029C:  GOTO   2A0
029D:  MOVF   39,W
029E:  BTFSC  03.2
029F:  GOTO   2BA
02A0:  MOVLW  10
02A1:  MOVWF  3B
02A2:  BCF    03.0
02A3:  RLF    37,F
02A4:  RLF    38,F
02A5:  RLF    77,F
02A6:  RLF    7A,F
02A7:  MOVF   3A,W
02A8:  SUBWF  7A,W
02A9:  BTFSS  03.2
02AA:  GOTO   2AD
02AB:  MOVF   39,W
02AC:  SUBWF  77,W
02AD:  BTFSS  03.0
02AE:  GOTO   2B6
02AF:  MOVF   39,W
02B0:  SUBWF  77,F
02B1:  BTFSS  03.0
02B2:  DECF   7A,F
02B3:  MOVF   3A,W
02B4:  SUBWF  7A,F
02B5:  BSF    03.0
02B6:  RLF    78,F
02B7:  RLF    79,F
02B8:  DECFSZ 3B,F
02B9:  GOTO   2A2
02BA:  RETURN
*
02EB:  MOVF   37,W
02EC:  ANDLW  07
02ED:  MOVWF  77
02EE:  RRF    37,W
02EF:  MOVWF  78
02F0:  RRF    78,F
02F1:  RRF    78,F
02F2:  MOVLW  1F
02F3:  ANDWF  78,F
02F4:  MOVF   78,W
02F5:  ADDWF  39,W
02F6:  MOVWF  04
02F7:  BCF    03.7
02F8:  BTFSC  3A.0
02F9:  BSF    03.7
02FA:  CLRF   78
02FB:  INCF   78,F
02FC:  INCF   77,F
02FD:  GOTO   2FF
02FE:  RLF    78,F
02FF:  DECFSZ 77,F
0300:  GOTO   2FE
0301:  MOVF   38,F
0302:  BTFSC  03.2
0303:  GOTO   307
0304:  MOVF   78,W
0305:  IORWF  00,F
0306:  GOTO   30A
0307:  COMF   78,F
0308:  MOVF   78,W
0309:  ANDWF  00,F
030A:  RETURN
*
03A3:  MOVLW  20
03A4:  MOVWF  47
03A5:  CLRF   43
03A6:  CLRF   44
03A7:  CLRF   45
03A8:  CLRF   46
03A9:  MOVF   3E,W
03AA:  MOVWF  7A
03AB:  MOVF   3D,W
03AC:  MOVWF  79
03AD:  MOVF   3C,W
03AE:  MOVWF  78
03AF:  MOVF   3B,W
03B0:  MOVWF  77
03B1:  BCF    03.0
03B2:  BTFSS  77.0
03B3:  GOTO   3C2
03B4:  MOVF   3F,W
03B5:  ADDWF  43,F
03B6:  MOVF   40,W
03B7:  BTFSC  03.0
03B8:  INCFSZ 40,W
03B9:  ADDWF  44,F
03BA:  MOVF   41,W
03BB:  BTFSC  03.0
03BC:  INCFSZ 41,W
03BD:  ADDWF  45,F
03BE:  MOVF   42,W
03BF:  BTFSC  03.0
03C0:  INCFSZ 42,W
03C1:  ADDWF  46,F
03C2:  RRF    46,F
03C3:  RRF    45,F
03C4:  RRF    44,F
03C5:  RRF    43,F
03C6:  RRF    7A,F
03C7:  RRF    79,F
03C8:  RRF    78,F
03C9:  RRF    77,F
03CA:  DECFSZ 47,F
03CB:  GOTO   3B1
*
0441:  MOVF   2B,W
0442:  CLRF   78
0443:  SUBWF  2A,W
0444:  BTFSC  03.0
0445:  GOTO   449
0446:  MOVF   2A,W
0447:  MOVWF  77
0448:  GOTO   455
0449:  CLRF   77
044A:  MOVLW  08
044B:  MOVWF  2C
044C:  RLF    2A,F
044D:  RLF    77,F
044E:  MOVF   2B,W
044F:  SUBWF  77,W
0450:  BTFSC  03.0
0451:  MOVWF  77
0452:  RLF    78,F
0453:  DECFSZ 2C,F
0454:  GOTO   44C
0455:  RETURN
0456:  MOVLW  20
0457:  BTFSS  25.4
0458:  MOVLW  30
0459:  MOVWF  26
045A:  MOVF   24,W
045B:  MOVWF  77
045C:  BTFSS  24.7
045D:  GOTO   466
045E:  COMF   77,F
045F:  INCF   77,F
0460:  MOVF   77,W
0461:  MOVWF  24
0462:  MOVLW  2D
0463:  MOVWF  26
0464:  BSF    25.7
0465:  BSF    25.0
0466:  MOVF   24,W
0467:  MOVWF  2A
0468:  MOVLW  64
0469:  MOVWF  2B
046A:  CALL   441
046B:  MOVF   77,W
046C:  MOVWF  24
046D:  MOVLW  30
046E:  ADDWF  78,W
046F:  MOVWF  27
0470:  MOVF   24,W
0471:  MOVWF  2A
0472:  MOVLW  0A
0473:  MOVWF  2B
0474:  CALL   441
0475:  MOVLW  30
0476:  ADDWF  77,W
0477:  MOVWF  29
0478:  MOVLW  30
0479:  ADDWF  78,W
047A:  MOVWF  28
047B:  MOVF   26,W
047C:  MOVWF  77
047D:  MOVLW  30
047E:  SUBWF  27,W
047F:  BTFSC  03.2
0480:  GOTO   485
0481:  BSF    25.1
0482:  BTFSC  25.7
0483:  BSF    25.2
0484:  GOTO   499
0485:  MOVF   26,W
0486:  MOVWF  27
0487:  MOVLW  20
0488:  MOVWF  26
0489:  MOVLW  30
048A:  SUBWF  28,W
048B:  BTFSC  03.2
048C:  GOTO   491
048D:  BSF    25.0
048E:  BTFSC  25.7
048F:  BSF    25.1
0490:  GOTO   499
0491:  BTFSS  03.2
0492:  BSF    25.0
0493:  BTFSS  03.2
0494:  GOTO   499
0495:  MOVF   27,W
0496:  MOVWF  28
0497:  MOVLW  20
0498:  MOVWF  27
0499:  BTFSC  25.2
049A:  GOTO   4A0
049B:  BTFSC  25.1
049C:  GOTO   4A3
049D:  BTFSC  25.0
049E:  GOTO   4A6
049F:  GOTO   4A9
04A0:  MOVF   26,W
04A1:  MOVWF  2E
04A2:  CALL   162
04A3:  MOVF   27,W
04A4:  MOVWF  2E
04A5:  CALL   162
04A6:  MOVF   28,W
04A7:  MOVWF  2E
04A8:  CALL   162
04A9:  MOVF   29,W
04AA:  MOVWF  2E
04AB:  CALL   162
04AC:  BCF    0A.3
04AD:  BCF    0A.4
04AE:  GOTO   5E1 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT, NOPUT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NOPROTECT, NODEBUG 
.................... #use delay(clock = 4000000) 
*
003D:  MOVLW  3C
003E:  MOVWF  04
003F:  BCF    03.7
0040:  MOVF   00,W
0041:  BTFSC  03.2
0042:  GOTO   051
0043:  MOVLW  01
0044:  MOVWF  78
0045:  CLRF   77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  DECFSZ 78,F
0049:  GOTO   045
004A:  MOVLW  4A
004B:  MOVWF  77
004C:  DECFSZ 77,F
004D:  GOTO   04C
004E:  GOTO   04F
004F:  DECFSZ 00,F
0050:  GOTO   043
0051:  RETURN
*
02D7:  MOVLW  12
02D8:  SUBWF  3C,F
02D9:  BTFSS  03.0
02DA:  GOTO   2EA
02DB:  MOVLW  3C
02DC:  MOVWF  04
02DD:  BCF    03.7
02DE:  MOVLW  FC
02DF:  ANDWF  00,F
02E0:  BCF    03.0
02E1:  RRF    00,F
02E2:  RRF    00,F
02E3:  MOVF   00,W
02E4:  BTFSC  03.2
02E5:  GOTO   2EA
02E6:  GOTO   2E8
02E7:  NOP
02E8:  DECFSZ 00,F
02E9:  GOTO   2E7
....................  
.................... #include <lcd2.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_xy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... #define LCD_RS_PIN      PIN_E1                                    //// 
.................... #define LCD_RW_PIN      PIN_E2                                    //// 
.................... #define LCD_DATA4       PIN_D4                                    //// 
.................... #define LCD_DATA5       PIN_D5                                    //// 
.................... #define LCD_DATA6       PIN_D6                                    //// 
.................... #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00B6:  BSF    08.4
....................    output_float(LCD_DATA5); 
00B7:  BSF    08.5
....................    output_float(LCD_DATA6); 
00B8:  BSF    08.6
....................    output_float(LCD_DATA7); 
00B9:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00BA:  BCF    03.5
00BB:  BSF    09.2
00BC:  BSF    03.5
00BD:  BCF    09.2
....................    delay_cycles(1); 
00BE:  NOP
....................    lcd_output_enable(1); 
00BF:  BCF    03.5
00C0:  BSF    09.0
00C1:  BSF    03.5
00C2:  BCF    09.0
....................    delay_cycles(1); 
00C3:  NOP
....................    high = lcd_read_nibble(); 
00C4:  BCF    03.5
00C5:  CALL   07D
00C6:  MOVF   78,W
00C7:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
00C8:  BCF    09.0
00C9:  BSF    03.5
00CA:  BCF    09.0
....................    delay_cycles(1); 
00CB:  NOP
....................    lcd_output_enable(1); 
00CC:  BCF    03.5
00CD:  BSF    09.0
00CE:  BSF    03.5
00CF:  BCF    09.0
....................    delay_us(1); 
00D0:  NOP
....................    low = lcd_read_nibble(); 
00D1:  BCF    03.5
00D2:  CALL   07D
00D3:  MOVF   78,W
00D4:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00D5:  BCF    09.0
00D6:  BSF    03.5
00D7:  BCF    09.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00D8:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00D9:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00DA:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00DB:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00DC:  BCF    03.5
00DD:  SWAPF  36,W
00DE:  MOVWF  77
00DF:  MOVLW  F0
00E0:  ANDWF  77,F
00E1:  MOVF   77,W
00E2:  IORWF  35,W
00E3:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
007D:  CLRF   37
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
007E:  BSF    03.5
007F:  BSF    08.4
0080:  MOVLW  00
0081:  BCF    03.5
0082:  BTFSC  08.4
0083:  MOVLW  01
0084:  IORWF  37,F
....................    n |= input(LCD_DATA5) << 1; 
0085:  BSF    03.5
0086:  BSF    08.5
0087:  MOVLW  00
0088:  BCF    03.5
0089:  BTFSC  08.5
008A:  MOVLW  01
008B:  MOVWF  77
008C:  BCF    03.0
008D:  RLF    77,F
008E:  MOVF   77,W
008F:  IORWF  37,F
....................    n |= input(LCD_DATA6) << 2; 
0090:  BSF    03.5
0091:  BSF    08.6
0092:  MOVLW  00
0093:  BCF    03.5
0094:  BTFSC  08.6
0095:  MOVLW  01
0096:  MOVWF  77
0097:  RLF    77,F
0098:  RLF    77,F
0099:  MOVLW  FC
009A:  ANDWF  77,F
009B:  MOVF   77,W
009C:  IORWF  37,F
....................    n |= input(LCD_DATA7) << 3; 
009D:  BSF    03.5
009E:  BSF    08.7
009F:  MOVLW  00
00A0:  BCF    03.5
00A1:  BTFSC  08.7
00A2:  MOVLW  01
00A3:  MOVWF  77
00A4:  RLF    77,F
00A5:  RLF    77,F
00A6:  RLF    77,F
00A7:  MOVLW  F8
00A8:  ANDWF  77,F
00A9:  MOVF   77,W
00AA:  IORWF  37,F
....................     
....................    return(n); 
00AB:  MOVF   37,W
00AC:  MOVWF  78
....................   #else 
00AD:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0052:  BTFSC  36.0
0053:  GOTO   056
0054:  BCF    08.4
0055:  GOTO   057
0056:  BSF    08.4
0057:  BSF    03.5
0058:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0059:  BCF    03.5
005A:  BTFSC  36.1
005B:  GOTO   05E
005C:  BCF    08.5
005D:  GOTO   05F
005E:  BSF    08.5
005F:  BSF    03.5
0060:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0061:  BCF    03.5
0062:  BTFSC  36.2
0063:  GOTO   066
0064:  BCF    08.6
0065:  GOTO   067
0066:  BSF    08.6
0067:  BSF    03.5
0068:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0069:  BCF    03.5
006A:  BTFSC  36.3
006B:  GOTO   06E
006C:  BCF    08.7
006D:  GOTO   06F
006E:  BSF    08.7
006F:  BSF    03.5
0070:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_enable(1); 
0072:  BCF    03.5
0073:  BSF    09.0
0074:  BSF    03.5
0075:  BCF    09.0
....................    delay_us(2); 
0076:  GOTO   077
....................    lcd_output_enable(0); 
0077:  BCF    03.5
0078:  BCF    09.0
0079:  BSF    03.5
007A:  BCF    09.0
007B:  BCF    03.5
007C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00AE:  BSF    03.5
00AF:  BCF    09.0
....................    lcd_rs_tris(); 
00B0:  BCF    09.1
....................    lcd_rw_tris(); 
00B1:  BCF    09.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00B2:  BCF    03.5
00B3:  BCF    09.1
00B4:  BSF    03.5
00B5:  BCF    09.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00E4:  MOVF   78,W
00E5:  MOVWF  35
00E6:  BTFSS  35.7
00E7:  GOTO   0EA
00E8:  BSF    03.5
00E9:  GOTO   0B6
....................    lcd_output_rs(address); 
00EA:  MOVF   33,F
00EB:  BTFSS  03.2
00EC:  GOTO   0EF
00ED:  BCF    09.1
00EE:  GOTO   0F0
00EF:  BSF    09.1
00F0:  BSF    03.5
00F1:  BCF    09.1
....................    delay_cycles(1); 
00F2:  NOP
....................    lcd_output_rw(0); 
00F3:  BCF    03.5
00F4:  BCF    09.2
00F5:  BSF    03.5
00F6:  BCF    09.2
....................    delay_cycles(1); 
00F7:  NOP
....................    lcd_output_enable(0); 
00F8:  BCF    03.5
00F9:  BCF    09.0
00FA:  BSF    03.5
00FB:  BCF    09.0
....................    lcd_send_nibble(n >> 4); 
00FC:  BCF    03.5
00FD:  SWAPF  34,W
00FE:  MOVWF  35
00FF:  MOVLW  0F
0100:  ANDWF  35,F
0101:  MOVF   35,W
0102:  MOVWF  36
0103:  CALL   052
....................    lcd_send_nibble(n & 0xf); 
0104:  MOVF   34,W
0105:  ANDLW  0F
0106:  MOVWF  35
0107:  MOVWF  36
0108:  CALL   052
0109:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
010A:  MOVLW  28
010B:  MOVWF  25
010C:  MOVLW  0C
010D:  MOVWF  26
010E:  MOVLW  01
010F:  MOVWF  27
0110:  MOVLW  06
0111:  MOVWF  28
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0112:  BCF    09.0
0113:  BSF    03.5
0114:  BCF    09.0
....................    lcd_output_rs(0); 
0115:  BCF    03.5
0116:  BCF    09.1
0117:  BSF    03.5
0118:  BCF    09.1
....................    lcd_output_rw(0); 
0119:  BCF    03.5
011A:  BCF    09.2
011B:  BSF    03.5
011C:  BCF    09.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
011D:  BCF    08.4
....................    output_drive(LCD_DATA5); 
011E:  BCF    08.5
....................    output_drive(LCD_DATA6); 
011F:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0120:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0121:  BCF    09.0
....................    lcd_rs_tris(); 
0122:  BCF    09.1
....................    lcd_rw_tris(); 
0123:  BCF    09.2
....................  #endif 
....................      
....................    delay_ms(15); 
0124:  MOVLW  0F
0125:  BCF    03.5
0126:  MOVWF  3C
0127:  CALL   03D
....................    for(i=1;i<=3;++i) 
0128:  MOVLW  01
0129:  MOVWF  24
012A:  MOVF   24,W
012B:  SUBLW  03
012C:  BTFSS  03.0
012D:  GOTO   136
....................    { 
....................        lcd_send_nibble(3); 
012E:  MOVLW  03
012F:  MOVWF  36
0130:  CALL   052
....................        delay_ms(5); 
0131:  MOVLW  05
0132:  MOVWF  3C
0133:  CALL   03D
0134:  INCF   24,F
0135:  GOTO   12A
....................    } 
....................     
....................    lcd_send_nibble(2); 
0136:  MOVLW  02
0137:  MOVWF  36
0138:  CALL   052
....................    delay_ms(5); 
0139:  MOVLW  05
013A:  MOVWF  3C
013B:  CALL   03D
....................    for(i=0;i<=3;++i) 
013C:  CLRF   24
013D:  MOVF   24,W
013E:  SUBLW  03
013F:  BTFSS  03.0
0140:  GOTO   14D
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0141:  MOVLW  25
0142:  ADDWF  24,W
0143:  MOVWF  04
0144:  BCF    03.7
0145:  MOVF   00,W
0146:  MOVWF  29
0147:  CLRF   33
0148:  MOVF   29,W
0149:  MOVWF  34
014A:  CALL   0AE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
014B:  INCF   24,F
014C:  GOTO   13D
014D:  BCF    0A.3
014E:  BCF    0A.4
014F:  GOTO   4CF (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0150:  DECFSZ 30,W
0151:  GOTO   153
0152:  GOTO   156
....................       address=LCD_LINE_TWO; 
0153:  MOVLW  40
0154:  MOVWF  31
0155:  GOTO   157
....................    else 
....................       address=0; 
0156:  CLRF   31
....................       
....................    address+=x-1; 
0157:  MOVLW  01
0158:  SUBWF  2F,W
0159:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
015A:  MOVF   31,W
015B:  IORLW  80
015C:  MOVWF  32
015D:  CLRF   33
015E:  MOVF   32,W
015F:  MOVWF  34
0160:  CALL   0AE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0161:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0162:  MOVF   2E,W
0163:  XORLW  07
0164:  BTFSC  03.2
0165:  GOTO   170
0166:  XORLW  0B
0167:  BTFSC  03.2
0168:  GOTO   175
0169:  XORLW  06
016A:  BTFSC  03.2
016B:  GOTO   17D
016C:  XORLW  02
016D:  BTFSC  03.2
016E:  GOTO   183
016F:  GOTO   188
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0170:  MOVLW  01
0171:  MOVWF  2F
0172:  MOVWF  30
0173:  CALL   150
0174:  GOTO   18D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0175:  CLRF   33
0176:  MOVLW  01
0177:  MOVWF  34
0178:  CALL   0AE
....................                      delay_ms(2); 
0179:  MOVLW  02
017A:  MOVWF  3C
017B:  CALL   03D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
017C:  GOTO   18D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
017D:  MOVLW  01
017E:  MOVWF  2F
017F:  MOVLW  02
0180:  MOVWF  30
0181:  CALL   150
0182:  GOTO   18D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0183:  CLRF   33
0184:  MOVLW  10
0185:  MOVWF  34
0186:  CALL   0AE
0187:  GOTO   18D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0188:  MOVLW  01
0189:  MOVWF  33
018A:  MOVF   2E,W
018B:  MOVWF  34
018C:  CALL   0AE
....................      #endif 
....................    } 
018D:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
*
01E4:  RLF    2E,F
01E5:  RLF    2E,F
01E6:  RLF    2E,F
01E7:  MOVLW  F8
01E8:  ANDWF  2E,F
....................    which &= 0x38; 
01E9:  MOVLW  38
01EA:  ANDWF  2E,F
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
01EB:  MOVF   2E,W
01EC:  IORLW  40
01ED:  MOVWF  32
01EE:  CLRF   33
01EF:  MOVF   32,W
01F0:  MOVWF  34
01F1:  CALL   0AE
....................  
....................    for(i=0; i<8; i++) 
01F2:  CLRF   31
01F3:  MOVF   31,W
01F4:  SUBLW  07
01F5:  BTFSS  03.0
01F6:  GOTO   20A
....................    { 
....................       lcd_send_byte(1, *ptr++); 
01F7:  MOVF   30,W
01F8:  MOVWF  7A
01F9:  MOVF   2F,W
01FA:  INCF   2F,F
01FB:  BTFSC  03.2
01FC:  INCF   30,F
01FD:  MOVWF  04
01FE:  BCF    03.7
01FF:  BTFSC  7A.0
0200:  BSF    03.7
0201:  MOVF   00,W
0202:  MOVWF  32
0203:  MOVLW  01
0204:  MOVWF  33
0205:  MOVF   32,W
0206:  MOVWF  34
0207:  CALL   0AE
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
0208:  INCF   31,F
0209:  GOTO   1F3
020A:  RETURN
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <buzzer_tone.c> 
.................... /* #include <buzzer_tone.c> 
.................... * 
.................... * Creada por: Ing. Abiezer Hernandez O. 
.................... * Fecha de creacion: 22/05/2020 
.................... * Electronica y Circuitos 
.................... * 
.................... */ 
....................  
.................... void do_delay(int ms_delay, int num_ms, int us_delay, int num_us) 
.................... { 
....................    int i; 
....................  
....................  for(i=0;i<num_ms;i++) 
*
02BB:  CLRF   3B
02BC:  MOVF   38,W
02BD:  SUBWF  3B,W
02BE:  BTFSC  03.0
02BF:  GOTO   2C5
....................   delay_ms(250); 
02C0:  MOVLW  FA
02C1:  MOVWF  3C
02C2:  CALL   03D
02C3:  INCF   3B,F
02C4:  GOTO   2BC
....................  delay_ms(ms_delay); 
02C5:  MOVF   37,W
02C6:  MOVWF  3C
02C7:  CALL   03D
....................  for(i=0;i<num_us;i++) 
02C8:  CLRF   3B
02C9:  MOVF   3A,W
02CA:  SUBWF  3B,W
02CB:  BTFSC  03.0
02CC:  GOTO   2D5
....................   delay_us(250); 
02CD:  MOVLW  52
02CE:  MOVWF  77
02CF:  DECFSZ 77,F
02D0:  GOTO   2CF
02D1:  GOTO   2D2
02D2:  NOP
02D3:  INCF   3B,F
02D4:  GOTO   2C9
....................  delay_us(us_delay); 
02D5:  MOVF   39,W
02D6:  MOVWF  3C
*
02EA:  RETURN
.................... } 
....................  
.................... void generate_tone(int8 pin_tone, long frequency, long duration) 
.................... { 
....................    int32 total_delay_time; 
....................    long total_ms_delay_time, total_us_delay_time; 
....................    int num_us_delays, num_ms_delays, ms_delay_time, us_delay_time; 
....................    long num_periods; 
....................  
....................    total_delay_time = (1000000/frequency)/2-10; 
*
030B:  BCF    03.1
030C:  CLRF   42
030D:  MOVLW  0F
030E:  MOVWF  41
030F:  MOVLW  42
0310:  MOVWF  40
0311:  MOVLW  40
0312:  MOVWF  3F
0313:  CLRF   46
0314:  CLRF   45
0315:  MOVF   26,W
0316:  MOVWF  44
0317:  MOVF   25,W
0318:  MOVWF  43
0319:  CALL   247
031A:  MOVF   7A,W
031B:  MOVWF  3A
031C:  MOVF   79,W
031D:  MOVWF  39
031E:  MOVF   78,W
031F:  MOVWF  38
0320:  MOVF   77,W
0321:  MOVWF  37
0322:  BCF    03.0
0323:  RRF    3A,F
0324:  RRF    39,F
0325:  RRF    38,F
0326:  RRF    37,F
0327:  MOVLW  0A
0328:  SUBWF  37,W
0329:  MOVWF  29
032A:  MOVF   38,W
032B:  MOVWF  2A
032C:  MOVLW  00
032D:  BTFSS  03.0
032E:  MOVLW  01
032F:  SUBWF  2A,F
0330:  MOVF   39,W
0331:  MOVWF  2B
0332:  MOVLW  00
0333:  BTFSS  03.0
0334:  MOVLW  01
0335:  SUBWF  2B,F
0336:  MOVF   3A,W
0337:  MOVWF  2C
0338:  MOVLW  00
0339:  BTFSS  03.0
033A:  MOVLW  01
033B:  SUBWF  2C,F
....................  
....................    total_ms_delay_time = total_delay_time/1000; 
033C:  BCF    03.1
033D:  MOVF   2C,W
033E:  MOVWF  42
033F:  MOVF   2B,W
0340:  MOVWF  41
0341:  MOVF   2A,W
0342:  MOVWF  40
0343:  MOVF   29,W
0344:  MOVWF  3F
0345:  CLRF   46
0346:  CLRF   45
0347:  MOVLW  03
0348:  MOVWF  44
0349:  MOVLW  E8
034A:  MOVWF  43
034B:  CALL   247
034C:  MOVF   78,W
034D:  MOVWF  2E
034E:  MOVF   77,W
034F:  MOVWF  2D
....................    num_ms_delays = total_ms_delay_time/250; 
0350:  MOVF   2E,W
0351:  MOVWF  38
0352:  MOVF   2D,W
0353:  MOVWF  37
0354:  CLRF   3A
0355:  MOVLW  FA
0356:  MOVWF  39
0357:  CALL   296
0358:  MOVF   78,W
0359:  MOVWF  32
....................    ms_delay_time = total_ms_delay_time%250; 
035A:  MOVF   2E,W
035B:  MOVWF  38
035C:  MOVF   2D,W
035D:  MOVWF  37
035E:  CLRF   3A
035F:  MOVLW  FA
0360:  MOVWF  39
0361:  CALL   296
0362:  MOVF   77,W
0363:  MOVWF  33
....................  
....................    total_us_delay_time = total_delay_time%1000; 
0364:  BSF    03.1
0365:  MOVLW  37
0366:  MOVWF  04
0367:  BCF    03.7
0368:  MOVF   2C,W
0369:  MOVWF  42
036A:  MOVF   2B,W
036B:  MOVWF  41
036C:  MOVF   2A,W
036D:  MOVWF  40
036E:  MOVF   29,W
036F:  MOVWF  3F
0370:  CLRF   46
0371:  CLRF   45
0372:  MOVLW  03
0373:  MOVWF  44
0374:  MOVLW  E8
0375:  MOVWF  43
0376:  CALL   247
0377:  MOVF   38,W
0378:  MOVWF  30
0379:  MOVF   37,W
037A:  MOVWF  2F
....................    num_us_delays = total_us_delay_time/250; 
037B:  MOVF   30,W
037C:  MOVWF  38
037D:  MOVF   2F,W
037E:  MOVWF  37
037F:  CLRF   3A
0380:  MOVLW  FA
0381:  MOVWF  39
0382:  CALL   296
0383:  MOVF   78,W
0384:  MOVWF  31
....................    us_delay_time = total_us_delay_time%250; 
0385:  MOVF   30,W
0386:  MOVWF  38
0387:  MOVF   2F,W
0388:  MOVWF  37
0389:  CLRF   3A
038A:  MOVLW  FA
038B:  MOVWF  39
038C:  CALL   296
038D:  MOVF   77,W
038E:  MOVWF  34
....................  
....................    num_periods = ((int32)duration*1000)/(1000000/frequency); 
038F:  CLRF   3A
0390:  CLRF   39
0391:  MOVF   28,W
0392:  MOVWF  38
0393:  MOVF   27,W
0394:  MOVWF  37
0395:  MOVF   3A,W
0396:  MOVWF  3E
0397:  MOVF   39,W
0398:  MOVWF  3D
0399:  MOVF   38,W
039A:  MOVWF  3C
039B:  MOVF   37,W
039C:  MOVWF  3B
039D:  CLRF   42
039E:  CLRF   41
039F:  MOVLW  03
03A0:  MOVWF  40
03A1:  MOVLW  E8
03A2:  MOVWF  3F
*
03CC:  MOVF   7A,W
03CD:  MOVWF  3A
03CE:  MOVF   79,W
03CF:  MOVWF  39
03D0:  MOVF   78,W
03D1:  MOVWF  38
03D2:  MOVF   77,W
03D3:  MOVWF  37
03D4:  BCF    03.1
03D5:  CLRF   42
03D6:  MOVLW  0F
03D7:  MOVWF  41
03D8:  MOVLW  42
03D9:  MOVWF  40
03DA:  MOVLW  40
03DB:  MOVWF  3F
03DC:  CLRF   46
03DD:  CLRF   45
03DE:  MOVF   26,W
03DF:  MOVWF  44
03E0:  MOVF   25,W
03E1:  MOVWF  43
03E2:  CALL   247
03E3:  MOVF   7A,W
03E4:  MOVWF  3E
03E5:  MOVF   79,W
03E6:  MOVWF  3D
03E7:  MOVF   78,W
03E8:  MOVWF  3C
03E9:  MOVF   77,W
03EA:  MOVWF  3B
03EB:  BCF    03.1
03EC:  MOVF   3A,W
03ED:  MOVWF  42
03EE:  MOVF   39,W
03EF:  MOVWF  41
03F0:  MOVF   38,W
03F1:  MOVWF  40
03F2:  MOVF   37,W
03F3:  MOVWF  3F
03F4:  MOVF   7A,W
03F5:  MOVWF  46
03F6:  MOVF   79,W
03F7:  MOVWF  45
03F8:  MOVF   78,W
03F9:  MOVWF  44
03FA:  MOVF   77,W
03FB:  MOVWF  43
03FC:  CALL   247
03FD:  MOVF   78,W
03FE:  MOVWF  36
03FF:  MOVF   77,W
0400:  MOVWF  35
....................  
....................    while((num_periods--) != 0) 
0401:  MOVF   36,W
0402:  MOVWF  7A
0403:  MOVF   35,W
0404:  BTFSC  03.2
0405:  DECF   36,F
0406:  DECF   35,F
0407:  MOVWF  37
0408:  MOVF   7A,W
0409:  MOVWF  38
040A:  MOVF   37,F
040B:  BTFSS  03.2
040C:  GOTO   410
040D:  MOVF   38,F
040E:  BTFSC  03.2
040F:  GOTO   43E
....................    { 
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
0410:  MOVF   33,W
0411:  MOVWF  37
0412:  MOVF   32,W
0413:  MOVWF  38
0414:  MOVF   34,W
0415:  MOVWF  39
0416:  MOVF   31,W
0417:  MOVWF  3A
0418:  CALL   2BB
....................       output_high(pin_tone); 
0419:  MOVF   24,W
041A:  MOVWF  37
041B:  MOVLW  01
041C:  MOVWF  38
041D:  CLRF   3A
041E:  CLRF   39
041F:  CALL   2EB
0420:  MOVF   24,W
0421:  MOVWF  37
0422:  CLRF   38
0423:  CLRF   3A
0424:  MOVLW  80
0425:  MOVWF  39
0426:  CALL   2EB
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
0427:  MOVF   33,W
0428:  MOVWF  37
0429:  MOVF   32,W
042A:  MOVWF  38
042B:  MOVF   34,W
042C:  MOVWF  39
042D:  MOVF   31,W
042E:  MOVWF  3A
042F:  CALL   2BB
....................       output_low(pin_tone); 
0430:  MOVF   24,W
0431:  MOVWF  37
0432:  CLRF   38
0433:  CLRF   3A
0434:  CLRF   39
0435:  CALL   2EB
0436:  MOVF   24,W
0437:  MOVWF  37
0438:  CLRF   38
0439:  CLRF   3A
043A:  MOVLW  80
043B:  MOVWF  39
043C:  CALL   2EB
043D:  GOTO   401
....................    } 
....................    return; 
043E:  BCF    0A.3
043F:  BCF    0A.4
0440:  GOTO   58F (RETURN)
.................... } 
....................  
....................  
.................... #define LED1 PIN_B2 
.................... #define button PIN_B0 
.................... #define buzzer PIN_B1 
....................  
.................... int16 ctf = 1000; 
....................  
.................... int8 random; 
....................  
.................... lcd_init(); 
....................  
.................... //---------SE GENERAN LAS FIGURAS CON CGRAM--------- 
....................  
.................... // dinosaurio sin pata izquierda 
.................... void dino1(int8 x, int8 y) 
.................... { 
....................    int dinosaurio1[8] = {7, 23, 22, 31, 14, 2, 3, 0}; // creamos el c gram 
*
020B:  MOVLW  07
020C:  MOVWF  26
020D:  MOVLW  17
020E:  MOVWF  27
020F:  MOVLW  16
0210:  MOVWF  28
0211:  MOVLW  1F
0212:  MOVWF  29
0213:  MOVLW  0E
0214:  MOVWF  2A
0215:  MOVLW  02
0216:  MOVWF  2B
0217:  MOVLW  03
0218:  MOVWF  2C
0219:  CLRF   2D
....................    lcd_set_cgram_char(1, dinosaurio1);                // guardamos el c gram 
021A:  MOVLW  01
021B:  MOVWF  2E
021C:  CLRF   30
021D:  MOVLW  26
021E:  MOVWF  2F
021F:  CALL   1E4
....................    lcd_gotoxy(x, y);                                  // ubicamos cursor 
0220:  MOVF   24,W
0221:  MOVWF  2F
0222:  MOVF   25,W
0223:  MOVWF  30
0224:  CALL   150
....................    lcd_putc(1);                                       // dibujamos segundo dinosaurio1 
0225:  MOVLW  01
0226:  MOVWF  2E
0227:  CALL   162
0228:  RETURN
.................... } 
....................  
.................... // dinosaurio sin pata derecha 
.................... void dino2(int8 x, int8 y) 
.................... { 
....................    int dinosaurio2[8] = {7, 23, 22, 31, 14, 8, 12, 0}; // creamos el c gram 
0229:  MOVLW  07
022A:  MOVWF  26
022B:  MOVLW  17
022C:  MOVWF  27
022D:  MOVLW  16
022E:  MOVWF  28
022F:  MOVLW  1F
0230:  MOVWF  29
0231:  MOVLW  0E
0232:  MOVWF  2A
0233:  MOVLW  08
0234:  MOVWF  2B
0235:  MOVLW  0C
0236:  MOVWF  2C
0237:  CLRF   2D
....................    lcd_set_cgram_char(2, dinosaurio2);                 // guardamos el c gram 
0238:  MOVLW  02
0239:  MOVWF  2E
023A:  CLRF   30
023B:  MOVLW  26
023C:  MOVWF  2F
023D:  CALL   1E4
....................    lcd_gotoxy(x, y);                                   // ubicamos cursor 
023E:  MOVF   24,W
023F:  MOVWF  2F
0240:  MOVF   25,W
0241:  MOVWF  30
0242:  CALL   150
....................    lcd_putc(2);                                        // dibujamos 
0243:  MOVLW  02
0244:  MOVWF  2E
0245:  CALL   162
0246:  RETURN
.................... } 
....................  
.................... // cactus grande 
.................... void cact1(int8 x, int8 y) 
.................... { 
....................    int cactus1[8] = {6, 22, 22, 30, 30, 6, 6, 31}; // creamos el c gram 
....................    lcd_set_cgram_char(3, cactus1);                 // guardamos el c gram 
....................    lcd_gotoxy(x, y);                               // ubicamos cursor 
....................    lcd_putc(3);                                    // dibujamos 
.................... } 
....................  
.................... // cactus chico 
.................... void cact2(int8 x, int8 y) 
.................... { 
....................    int cactus2[8] = {0, 0, 12, 13, 15, 12, 12, 31}; 
....................    lcd_set_cgram_char(4, cactus2); // guardamos el c gram 
....................    lcd_gotoxy(x, y);               // ubicamos cursor 
....................    lcd_putc(4);                    // dibujamos 
.................... } 
....................  
.................... // sol 1 
.................... void sole1(int8 x, int8 y) 
.................... { 
....................    int sol1[8] = {29, 28, 25, 2, 20, 0, 0, 0}; 
....................    lcd_set_cgram_char(5, sol1); // guardamos el c gram 
....................    lcd_gotoxy(x, y);            // ubicamos cursor 
....................    lcd_putc(5);                 // dibujamos 
.................... } 
....................  
.................... // sol 2 
.................... void sole2(int8 x, int8 y) 
.................... { 
....................    int sol2[8] = {28, 29, 24, 2, 8, 0, 0, 0}; 
....................    lcd_set_cgram_char(6, sol2); // guardamos el c gram 
....................    lcd_gotoxy(x, y);            // ubicamos cursor 
....................    lcd_putc(6);                 // dibujamos 
.................... } 
....................  
.................... /* ////////////////////////hacemos la funcion animacion INICIO/////////////////////////////// 
....................  
....................  
.................... void RunDinoInic(int16 t){ 
....................       lcd_putc("\f");//borramos pantalla 
....................       lcd_gotoxy(1,1); //ubicamos cursor 
....................       lcd_putc(1);//dibujamos segundo dinosaurio2 
....................       lcd_gotoxy(3,1); //ubicamos cursor 
....................       lcd_putc("DALE AL BOTON!"); 
....................       delay_ms(t*2); //esperamos 
....................       lcd_putc("\f");//borramos pantalla 
....................       lcd_gotoxy(1,1); //ubicamos cursor 
....................       lcd_putc(2);//dibujamos segundo dinosaurio2 
....................       lcd_gotoxy(3,1); //ubicamos cursor 
....................       lcd_putc("DALE AL BOTON!"); 
....................       lcd_gotoxy(2,2); //ubicamos cursor 
....................       lcd_putc("YO SE Q QUIERES!!"); 
....................       delay_ms(t*2);//esperamos 
....................  
.................... } 
....................  
....................  
.................... ////////////////////////hacemos la funcion animacion de dinosaurio corriendo/////////////////////////////// 
.................... void RunDino(){ 
....................       //lcd_putc("\f");//borramos pantalla 
....................       lcd_gotoxy(2,2); //ubicamos cursor 
....................       lcd_putc(1);//dibujamos segundo dinosaurio2 
....................      // lcd_putc("\f");//borramos pantalla 
....................       lcd_gotoxy(2,2); //ubicamos cursor 
....................       lcd_putc(2);//dibujamos segundo dinosaurio2 
.................... } 
.................... ///////////////////////////HACEMOS EL SOL//////////////////////////////////////////////////////////////////7 
....................  void Solecito (){ 
....................       lcd_gotoxy(1,1); //ubicamos cursor 
....................       lcd_putc(5);//dibujamos segundo al sol 
....................       lcd_gotoxy(1,1); 
....................       lcd_putc(6);//dibujamos segundo al sol3 
....................  
....................  } */ 
....................  
.................... void main() 
*
04AF:  MOVF   03,W
04B0:  ANDLW  1F
04B1:  MOVWF  03
04B2:  MOVLW  03
04B3:  MOVWF  21
04B4:  MOVLW  E8
04B5:  MOVWF  20
04B6:  BSF    03.5
04B7:  BSF    1F.0
04B8:  BSF    1F.1
04B9:  BSF    1F.2
04BA:  BCF    1F.3
04BB:  MOVLW  07
04BC:  MOVWF  1C
04BD:  BCF    03.7
.................... { 
....................  
....................    DISABLE_INTERRUPTS(GLOBAL); 
04BE:  BCF    03.5
04BF:  BCF    0B.6
04C0:  BCF    0B.7
04C1:  BTFSC  0B.7
04C2:  GOTO   4C0
....................    OUTPUT_LOW(led1); 
04C3:  BSF    03.5
04C4:  BCF    06.2
04C5:  BCF    03.5
04C6:  BCF    06.2
....................    delay_ms(333); 
04C7:  MOVLW  03
04C8:  MOVWF  24
04C9:  MOVLW  6F
04CA:  MOVWF  3C
04CB:  CALL   03D
04CC:  DECFSZ 24,F
04CD:  GOTO   4C9
....................    lcd_init(); 
04CE:  GOTO   10A
....................    // ENABLE_INTERRUPTS(INT_EXT); 
....................    // ENABLE_INTERRUPTS(GLOBAL); 
....................    lcd_gotoxy(1, 1); 
04CF:  MOVLW  01
04D0:  MOVWF  2F
04D1:  MOVWF  30
04D2:  CALL   150
....................    printf(lcd_putc, "holis"); 
04D3:  MOVLW  04
04D4:  BSF    03.6
04D5:  MOVWF  0D
04D6:  MOVLW  00
04D7:  MOVWF  0F
04D8:  BCF    03.6
04D9:  CALL   18E
....................    lcd_gotoxy(1, 2); 
04DA:  MOVLW  01
04DB:  MOVWF  2F
04DC:  MOVLW  02
04DD:  MOVWF  30
04DE:  CALL   150
....................    printf(lcd_putc, "000000000000000"); 
04DF:  MOVLW  07
04E0:  BSF    03.6
04E1:  MOVWF  0D
04E2:  MOVLW  00
04E3:  MOVWF  0F
04E4:  BCF    03.6
04E5:  CALL   18E
....................    delay_ms(ctf); 
04E6:  MOVF   21,W
04E7:  MOVWF  24
04E8:  INCF   24,F
04E9:  DECF   24,F
04EA:  BTFSC  03.2
04EB:  GOTO   4F0
04EC:  MOVLW  FF
04ED:  MOVWF  3C
04EE:  CALL   03D
04EF:  GOTO   4E9
04F0:  MOVF   20,W
04F1:  MOVWF  3C
04F2:  CALL   03D
....................    lcd_putc("\f"); // borramos pantalla 
04F3:  MOVLW  0F
04F4:  BSF    03.6
04F5:  MOVWF  0D
04F6:  MOVLW  00
04F7:  MOVWF  0F
04F8:  BCF    03.6
04F9:  CALL   18E
....................    // generate_tone(buzzer, 64, 500); 
....................  
....................    while (input_state(button) == 0) 
04FA:  BTFSC  06.0
04FB:  GOTO   581
....................    { 
....................       lcd_putc("\f");   // borramos pantalla 
04FC:  MOVLW  10
04FD:  BSF    03.6
04FE:  MOVWF  0D
04FF:  MOVLW  00
0500:  MOVWF  0F
0501:  BCF    03.6
0502:  CALL   18E
....................       dino1(1, 1);      // dibujamos segundo dinosaurio1 
0503:  MOVLW  01
0504:  MOVWF  24
0505:  MOVWF  25
0506:  CALL   20B
....................       lcd_gotoxy(3, 1); // ubicamos cursor para texto 
0507:  MOVLW  03
0508:  MOVWF  2F
0509:  MOVLW  01
050A:  MOVWF  30
050B:  CALL   150
....................       lcd_putc("DALE AL BOTON!"); 
050C:  MOVLW  11
050D:  BSF    03.6
050E:  MOVWF  0D
050F:  MOVLW  00
0510:  MOVWF  0F
0511:  BCF    03.6
0512:  CALL   18E
....................       delay_ms(ctf / 2); // esperamos 
0513:  BCF    03.0
0514:  RRF    21,W
0515:  MOVWF  25
0516:  RRF    20,W
0517:  MOVWF  24
0518:  MOVF   25,W
0519:  MOVWF  26
051A:  INCF   26,F
051B:  DECF   26,F
051C:  BTFSC  03.2
051D:  GOTO   522
051E:  MOVLW  FF
051F:  MOVWF  3C
0520:  CALL   03D
0521:  GOTO   51B
0522:  MOVF   24,W
0523:  MOVWF  3C
0524:  CALL   03D
....................       dino2(1, 1); 
0525:  MOVLW  01
0526:  MOVWF  24
0527:  MOVWF  25
0528:  CALL   229
....................       ;                  // dibujamos segundo dinosaurio2 
....................       delay_ms(ctf / 2); // esperamos 
0529:  BCF    03.0
052A:  RRF    21,W
052B:  MOVWF  25
052C:  RRF    20,W
052D:  MOVWF  24
052E:  MOVF   25,W
052F:  MOVWF  26
0530:  INCF   26,F
0531:  DECF   26,F
0532:  BTFSC  03.2
0533:  GOTO   538
0534:  MOVLW  FF
0535:  MOVWF  3C
0536:  CALL   03D
0537:  GOTO   531
0538:  MOVF   24,W
0539:  MOVWF  3C
053A:  CALL   03D
....................       lcd_putc("\f");    // borramos pantalla 
053B:  MOVLW  19
053C:  BSF    03.6
053D:  MOVWF  0D
053E:  MOVLW  00
053F:  MOVWF  0F
0540:  BCF    03.6
0541:  CALL   18E
....................       dino1(1, 1); 
0542:  MOVLW  01
0543:  MOVWF  24
0544:  MOVWF  25
0545:  CALL   20B
....................       ;                 // dibujamos segundo dinosaurio2 
....................       lcd_gotoxy(3, 1); // ubicamos cursor 
0546:  MOVLW  03
0547:  MOVWF  2F
0548:  MOVLW  01
0549:  MOVWF  30
054A:  CALL   150
....................       lcd_putc("DALE AL BOTON!"); 
054B:  MOVLW  1A
054C:  BSF    03.6
054D:  MOVWF  0D
054E:  MOVLW  00
054F:  MOVWF  0F
0550:  BCF    03.6
0551:  CALL   18E
....................       delay_ms(ctf / 2); // esperamos 
0552:  BCF    03.0
0553:  RRF    21,W
0554:  MOVWF  25
0555:  RRF    20,W
0556:  MOVWF  24
0557:  MOVF   25,W
0558:  MOVWF  26
0559:  INCF   26,F
055A:  DECF   26,F
055B:  BTFSC  03.2
055C:  GOTO   561
055D:  MOVLW  FF
055E:  MOVWF  3C
055F:  CALL   03D
0560:  GOTO   55A
0561:  MOVF   24,W
0562:  MOVWF  3C
0563:  CALL   03D
....................       dino2(1, 1); 
0564:  MOVLW  01
0565:  MOVWF  24
0566:  MOVWF  25
0567:  CALL   229
....................       ;                 // dibujamos segundo dinosaurio2 
....................       lcd_gotoxy(2, 2); // ubicamos cursor 
0568:  MOVLW  02
0569:  MOVWF  2F
056A:  MOVWF  30
056B:  CALL   150
....................       lcd_putc("YO SE Q QUIERES!!"); 
056C:  MOVLW  22
056D:  BSF    03.6
056E:  MOVWF  0D
056F:  MOVLW  00
0570:  MOVWF  0F
0571:  BCF    03.6
0572:  CALL   18E
....................       delay_ms(ctf); // esperamos 
0573:  MOVF   21,W
0574:  MOVWF  24
0575:  INCF   24,F
0576:  DECF   24,F
0577:  BTFSC  03.2
0578:  GOTO   57D
0579:  MOVLW  FF
057A:  MOVWF  3C
057B:  CALL   03D
057C:  GOTO   576
057D:  MOVF   20,W
057E:  MOVWF  3C
057F:  CALL   03D
0580:  GOTO   4FA
....................    } 
....................  
....................    int8 sr = 10; 
0581:  MOVLW  0A
0582:  MOVWF  23
....................  
....................    while (input_state(button) == 1) 
0583:  BTFSS  06.0
0584:  GOTO   59D
....................    { 
....................  
....................       generate_tone(buzzer, 500, 64); 
0585:  MOVLW  31
0586:  MOVWF  24
0587:  MOVLW  01
0588:  MOVWF  26
0589:  MOVLW  F4
058A:  MOVWF  25
058B:  CLRF   28
058C:  MOVLW  40
058D:  MOVWF  27
058E:  GOTO   30B
....................       delay_ms(CTF); // esperamos 
058F:  MOVF   21,W
0590:  MOVWF  24
0591:  INCF   24,F
0592:  DECF   24,F
0593:  BTFSC  03.2
0594:  GOTO   599
0595:  MOVLW  FF
0596:  MOVWF  3C
0597:  CALL   03D
0598:  GOTO   592
0599:  MOVF   20,W
059A:  MOVWF  3C
059B:  CALL   03D
059C:  GOTO   583
....................  
....................       // RunDino(ctf/5); 
....................    } 
....................    lcd_putc("\f"); // borramos pantalla 
059D:  MOVLW  2B
059E:  BSF    03.6
059F:  MOVWF  0D
05A0:  MOVLW  00
05A1:  MOVWF  0F
05A2:  BCF    03.6
05A3:  CALL   18E
....................    lcd_putc("AYYY PAPAA!! XD"); 
05A4:  MOVLW  2C
05A5:  BSF    03.6
05A6:  MOVWF  0D
05A7:  MOVLW  00
05A8:  MOVWF  0F
05A9:  BCF    03.6
05AA:  CALL   18E
....................    lcd_gotoxy(4, 2); // ubicamos cursor 
05AB:  MOVLW  04
05AC:  MOVWF  2F
05AD:  MOVLW  02
05AE:  MOVWF  30
05AF:  CALL   150
....................    lcd_putc("ARRANCAMOS"); 
05B0:  MOVLW  34
05B1:  BSF    03.6
05B2:  MOVWF  0D
05B3:  MOVLW  00
05B4:  MOVWF  0F
05B5:  BCF    03.6
05B6:  CALL   18E
....................    delay_ms(CTF);  // esperamos 
05B7:  MOVF   21,W
05B8:  MOVWF  24
05B9:  INCF   24,F
05BA:  DECF   24,F
05BB:  BTFSC  03.2
05BC:  GOTO   5C1
05BD:  MOVLW  FF
05BE:  MOVWF  3C
05BF:  CALL   03D
05C0:  GOTO   5BA
05C1:  MOVF   20,W
05C2:  MOVWF  3C
05C3:  CALL   03D
....................    lcd_putc("\f"); // borramos pantalla 
05C4:  MOVLW  3A
05C5:  BSF    03.6
05C6:  MOVWF  0D
05C7:  MOVLW  00
05C8:  MOVWF  0F
05C9:  BCF    03.6
05CA:  CALL   18E
....................  
....................    while (TRUE) 
....................    { // HACEMOS UN CICLO INFINITO 
....................  
....................       lcd_gotoxy(9, 1); // ubicamos cursor 
05CB:  MOVLW  09
05CC:  MOVWF  2F
05CD:  MOVLW  01
05CE:  MOVWF  30
05CF:  CALL   150
....................       lcd_putc("P="); 
05D0:  MOVLW  3B
05D1:  BSF    03.6
05D2:  MOVWF  0D
05D3:  MOVLW  00
05D4:  MOVWF  0F
05D5:  BCF    03.6
05D6:  CALL   18E
....................       lcd_gotoxy(11, 1); // ubicamos cursor 
05D7:  MOVLW  0B
05D8:  MOVWF  2F
05D9:  MOVLW  01
05DA:  MOVWF  30
05DB:  CALL   150
....................       printf(lcd_putc "%d" ,sr); 
05DC:  MOVF   23,W
05DD:  MOVWF  24
05DE:  MOVLW  18
05DF:  MOVWF  25
05E0:  GOTO   456
05E1:  GOTO   5CB
....................  
....................    } // FIN DEL CICLO 
....................  
.................... } // fin de main 
05E2:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
