C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
D G "__PCM__" 0 439 ""5.025""
D G "__DEVICE__" 0 439 "877"
D G "__DATE__" 0 439 ""06-feb.-23""
D G "__TIME__" 0 439 ""16:09:40"" "Proyecto de Lcd , Tercera  practica. realizado por Mi . Jesus Monsalve"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
v L "value" 1 40 "int8" `60 
f B "set_tris_d" 1 40 "void(int8 value)" `59 
v L "value" 1 41 "int8" `62 
f B "set_tris_e" 1 41 "void(int8 value)" `61 
f B "get_tris_a" 1 42 "int8()" `63 
f B "get_tris_b" 1 43 "int8()" `64 
f B "get_tris_c" 1 44 "int8()" `65 
f B "get_tris_d" 1 45 "int8()" `66 
f B "get_tris_e" 1 46 "int8()" `67 
v L "value" 1 47 "int8" `69 
f B "output_a" 1 47 "void(int8 value)" `68 
v L "value" 1 48 "int8" `71 
f B "output_b" 1 48 "void(int8 value)" `70 
v L "value" 1 49 "int8" `73 
f B "output_c" 1 49 "void(int8 value)" `72 
v L "value" 1 50 "int8" `75 
f B "output_d" 1 50 "void(int8 value)" `74 
v L "value" 1 51 "int8" `77 
f B "output_e" 1 51 "void(int8 value)" `76 
f B "input_a" 1 52 "int8()" `78 
f B "input_b" 1 53 "int8()" `79 
f B "input_c" 1 54 "int8()" `80 
f B "input_d" 1 55 "int8()" `81 
f B "input_e" 1 56 "int8()" `82 
f B "input_change_a" 1 57 "int8()" `83 
f B "input_change_b" 1 58 "int8()" `84 
f B "input_change_c" 1 59 "int8()" `85 
f B "input_change_d" 1 60 "int8()" `86 
f B "input_change_e" 1 61 "int8()" `87 
v L "pin" 1 62 "int16" `89 
f B "input" 1 62 "int8(int16 pin)" `88 
v L "pin" 1 63 "int16" `91 
f B "input_state" 1 63 "int8(int16 pin)" `90 
v L "pin" 1 64 "int16" `93 
f B "output_low" 1 64 "void(int16 pin)" `92 
v L "pin" 1 65 "int16" `95 
f B "output_high" 1 65 "void(int16 pin)" `94 
v L "pin" 1 66 "int16" `97 
f B "output_toggle" 1 66 "void(int16 pin)" `96 
v L "pin" 1 67 "int16" `99 
v L "level" 1 67 "int8" `100 
f B "output_bit" 1 67 "void(int16 pin,int8 level)" `98 
v L "pin" 1 68 "int16" `102 
f B "output_float" 1 68 "void(int16 pin)" `101 
v L "pin" 1 69 "int16" `104 
f B "output_drive" 1 69 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 73 "40"
d G "PIN_A1" 1 74 "41"
d G "PIN_A2" 1 75 "42"
d G "PIN_A3" 1 76 "43"
d G "PIN_A4" 1 77 "44"
d G "PIN_A5" 1 78 "45"
d G "PIN_B0" 1 80 "48"
d G "PIN_B1" 1 81 "49"
d G "PIN_B2" 1 82 "50"
d G "PIN_B3" 1 83 "51"
d G "PIN_B4" 1 84 "52"
d G "PIN_B5" 1 85 "53"
d G "PIN_B6" 1 86 "54"
d G "PIN_B7" 1 87 "55"
d G "PIN_C0" 1 89 "56"
d G "PIN_C1" 1 90 "57"
d G "PIN_C2" 1 91 "58"
d G "PIN_C3" 1 92 "59"
d G "PIN_C4" 1 93 "60"
d G "PIN_C5" 1 94 "61"
d G "PIN_C6" 1 95 "62"
d G "PIN_C7" 1 96 "63"
d G "PIN_D0" 1 98 "64"
d G "PIN_D1" 1 99 "65"
d G "PIN_D2" 1 100 "66"
d G "PIN_D3" 1 101 "67"
d G "PIN_D4" 1 102 "68"
d G "PIN_D5" 1 103 "69"
d G "PIN_D6" 1 104 "70"
d G "PIN_D7" 1 105 "71"
d G "PIN_E0" 1 107 "72"
d G "PIN_E1" 1 108 "73"
d G "PIN_E2" 1 109 "74"
d G "FALSE" 1 112 "0"
d G "TRUE" 1 113 "1"
d G "BYTE" 1 115 "int8"
d G "BOOLEAN" 1 116 "int1"
d G "getc" 1 118 "getch"
d G "fgetc" 1 119 "getch"
d G "getchar" 1 120 "getch"
d G "putc" 1 121 "putchar"
d G "fputc" 1 122 "putchar"
d G "fgets" 1 123 "gets"
d G "fputs" 1 124 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 129 "int8()" `105 
f B "reset_cpu" 1 130 "void()" `106 
f B "sleep" 1 131 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 133 "3"
d G "WDT_TIMEOUT" 1 134 "11"
d G "MCLR_FROM_SLEEP" 1 135 "19"
d G "MCLR_FROM_RUN" 1 136 "27"
d G "NORMAL_POWER_UP" 1 137 "25"
d G "BROWNOUT_RESTART" 1 138 "26"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 145 "int8" `109 
f B "setup_timer_0" 1 145 "void(int8 mode)" `108 
v L "value" 1 146 "int8" `111 
f B "set_timer0" 1 146 "void(int8 value)" `110 
f B "get_timer0" 1 147 "int8()" `112 
v L "mode" 1 148 "int8" `114 
v L "prescaler" 1 148 "int8" `115 
f B "setup_counters" 1 148 "void(int8 mode,int8 prescaler)" `113 
v L "value" 1 149 "int8" `117 
f B "set_rtcc" 1 149 "void(int8 value)" `116 
f B "get_rtcc" 1 150 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 152 "0"
d G "T0_EXT_L_TO_H" 1 153 "32"
d G "T0_EXT_H_TO_L" 1 154 "48"
d G "T0_DIV_1" 1 156 "8"
d G "T0_DIV_2" 1 157 "0"
d G "T0_DIV_4" 1 158 "1"
d G "T0_DIV_8" 1 159 "2"
d G "T0_DIV_16" 1 160 "3"
d G "T0_DIV_32" 1 161 "4"
d G "T0_DIV_64" 1 162 "5"
d G "T0_DIV_128" 1 163 "6"
d G "T0_DIV_256" 1 164 "7"
d G "T0_8_BIT" 1 167 "0"
d G "RTCC_INTERNAL" 1 169 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 170 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 171 "48"
d G "RTCC_DIV_1" 1 172 "8"
d G "RTCC_DIV_2" 1 173 "0"
d G "RTCC_DIV_4" 1 174 "1"
d G "RTCC_DIV_8" 1 175 "2"
d G "RTCC_DIV_16" 1 176 "3"
d G "RTCC_DIV_32" 1 177 "4"
d G "RTCC_DIV_64" 1 178 "5"
d G "RTCC_DIV_128" 1 179 "6"
d G "RTCC_DIV_256" 1 180 "7"
d G "RTCC_8_BIT" 1 181 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 192 "int16" `120 
f B "setup_wdt" 1 192 "void(int16 mode)" `119 
f B "restart_wdt" 1 193 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 196 "8"
d G "WDT_36MS" 1 197 "9"
d G "WDT_72MS" 1 198 "10"
d G "WDT_144MS" 1 199 "11"
d G "WDT_288MS" 1 200 "12"
d G "WDT_576MS" 1 201 "13"
d G "WDT_1152MS" 1 202 "14"
d G "WDT_2304MS" 1 203 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 209 "int16" `123 
f B "setup_timer_1" 1 209 "void(int16 mode)" `122 
f B "get_timer1" 1 210 "int16()" `124 
v L "value" 1 211 "int16" `126 
f B "set_timer1" 1 211 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 214 "0"
d G "T1_INTERNAL" 1 215 "0x85"
d G "T1_EXTERNAL" 1 216 "0x87"
d G "T1_EXTERNAL_SYNC" 1 217 "0x83"
d G "T1_CLK_OUT" 1 219 "8"
d G "T1_DIV_BY_1" 1 221 "0"
d G "T1_DIV_BY_2" 1 222 "0x10"
d G "T1_DIV_BY_4" 1 223 "0x20"
d G "T1_DIV_BY_8" 1 224 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 229 "int8" `128 
v L "period" 1 229 "int8" `129 
v L "postscale" 1 229 "int8" `130 
f B "setup_timer_2" 1 229 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 1 230 "int8()" `131 
v L "value" 1 231 "int8" `133 
f B "set_timer2" 1 231 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 233 "0"
d G "T2_DIV_BY_1" 1 234 "4"
d G "T2_DIV_BY_4" 1 235 "5"
d G "T2_DIV_BY_16" 1 236 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
v L "mode" 1 242 "int32" `135 
f B "setup_ccp1" 1 242 "void(int32 mode)" `134 
v L "mode" 1 243 "int32" `137 
v L "pwm" 1 243 "int8" `138 
f G "setup_ccp1" 1 243 "void(int32 mode,int8 pwm)" `136 
v L "value" 1 244 "int16" `140 
f B "set_pwm1_duty" 1 244 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 246 "0"
d G "CCP_CAPTURE_FE" 1 247 "0x04"
d G "CCP_CAPTURE_RE" 1 248 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 249 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 250 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 251 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 252 "0x09"
d G "CCP_COMPARE_INT" 1 253 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 254 "0x0B"
d G "CCP_PWM" 1 255 "0x0C"
d G "CCP_PWM_PLUS_1" 1 256 "0x1c"
d G "CCP_PWM_PLUS_2" 1 257 "0x2c"
d G "CCP_PWM_PLUS_3" 1 258 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 265 "int32" `145 
f B "setup_ccp2" 1 265 "void(int32 mode)" `144 
v L "mode" 1 266 "int32" `147 
v L "pwm" 1 266 "int8" `148 
f G "setup_ccp2" 1 266 "void(int32 mode,int8 pwm)" `146 
v L "value" 1 267 "int16" `150 
f B "set_pwm2_duty" 1 267 "void(int16 value)" `149 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
v L "mode" 1 276 "int8" `155 
f B "setup_psp" 1 276 "void(int8 mode)" `154 
f B "psp_output_full" 1 277 "int8()" `156 
f B "psp_input_full" 1 278 "int8()" `157 
f B "psp_overflow" 1 279 "int8()" `158  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 281 "0x10"
d G "PSP_DISABLED" 1 282 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
v L "mode" 1 289 "int32" `161 
f B "setup_spi" 1 289 "void(int32 mode)" `160 
v L "value" 1 290 "int8" `163 
f B "spi_write" 1 290 "void(int8 value)" `162 
f B "spi_read" 1 291 "int8()" `164 
v L "value" 1 292 "int8" `166 
f G "spi_read" 1 292 "int8(int8 value)" `165 
f B "spi_data_in" 1 293 "int8()" `167  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 295 "0x00"
d G "SPI_MASTER" 1 296 "0x20"
d G "SPI_SLAVE" 1 297 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 298 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 299 "0x00"
d G "SPI_CLK_DIV_4" 1 300 "0x00"
d G "SPI_CLK_DIV_16" 1 301 "0x01"
d G "SPI_CLK_DIV_64" 1 302 "0x02"
d G "SPI_CLK_T2" 1 303 "0x03"
d G "SPI_SS_DISABLED" 1 304 "0x01"
d G "SPI_XMIT_L_TO_H" 1 306 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 307 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 309 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 310 "0x8000"
d G "SPI_L_TO_H" 1 313 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 314 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 2 "FUNCTION"
v L "baud" 1 318 "int32" `169 
f B "setup_uart" 1 318 "void(int32 baud)" `168 
v L "baud" 1 319 "int32" `171 
v L "stream" 1 319 "int8" `172 
f G "setup_uart" 1 319 "void(int32 baud,int8 stream)" `170 
v L "baud" 1 320 "int32" `174 
v L "stream" 1 320 "int8" `175 
v L "clock" 1 320 "int32" `176 
f G "setup_uart" 1 320 "void(int32 baud,int8 stream,int32 clock)" `173 
v L "baud" 1 321 "int32" `178 
f B "set_uart_speed" 1 321 "void(int32 baud)" `177 
v L "baud" 1 322 "int32" `180 
v L "stream" 1 322 "int8" `181 
f G "set_uart_speed" 1 322 "void(int32 baud,int8 stream)" `179 
v L "baud" 1 323 "int32" `183 
v L "stream" 1 323 "int8" `184 
v L "clock" 1 323 "int32" `185 
f G "set_uart_speed" 1 323 "void(int32 baud,int8 stream,int32 clock)" `182  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 327 "2"
d G "UART_DATA" 1 328 "4"
c L "set_uart_speed" 1 1 3 "FUNCTION"
v L "mode" 1 332 "int32" `187 
f B "setup_comparator" 1 332 "void(int32 mode)" `186  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 334 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 335 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 336 "0xbcf05"
d G "NC_NC_NC_NC" 1 337 "0x0ff07"
d G "A0_A3_A1_A2" 1 338 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 339 "0x9ef01"
d G "A0_VR_A1_VR" 1 340 "0x3ff06"
d G "A3_VR_A2_VR" 1 341 "0xcff0e"
d G "CP1_INVERT" 1 342 "0x0000010"
d G "CP2_INVERT" 1 343 "0x0000020"
c L "setup_comparator" 1 1 2 "FUNCTION"
v L "mode" 1 350 "int8" `191 
f B "setup_vref" 1 350 "void(int8 mode)" `190  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 352 "0xa0"
d G "VREF_HIGH" 1 353 "0x80"
d G "VREF_A2" 1 355 "0x40"
c L "setup_vref" 1 1 4 "FUNCTION"
v L "mode" 1 363 "int32" `193 
f B "setup_adc" 1 363 "void(int32 mode)" `192 
f B "read_adc" 1 364 "int8()" `194 
v L "mode" 1 365 "int8" `196 
f G "read_adc" 1 365 "int8(int8 mode)" `195 
f G "read_adc" 1 366 "int16()" `197 
v L "mode" 1 367 "int8" `199 
f G "read_adc" 1 367 "int16(int8 mode)" `198 
f B "adc_done" 1 368 "int8()" `200  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 370 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 371 "0x10000"
d G "ADC_CLOCK_DIV_4" 1 372 "0x4000"
d G "ADC_CLOCK_DIV_8" 1 373 "0x0040"
d G "ADC_CLOCK_DIV_16" 1 374 "0x4040"
d G "ADC_CLOCK_DIV_32" 1 375 "0x0080"
d G "ADC_CLOCK_DIV_64" 1 376 "0x4080"
d G "ADC_CLOCK_INTERNAL" 1 377 "0x00c0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
v L "setting" 1 380 "int8" `202 
f B "setup_adc_ports" 1 380 "void(int8 setting)" `201 
v L "channel" 1 381 "int8" `204 
f B "set_adc_channel" 1 381 "void(int8 channel)" `203  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 383 "7" "None"
d G "ALL_ANALOG" 1 384 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 1 385 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 1 386 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 387 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 388 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 389 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 1 390 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 1 391 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 1 392 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 1 393 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 1 394 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 395 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 396 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 397 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 398 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 1 399 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 1 400 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 401 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 402 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 403 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 1 404 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 1 405 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 1 406 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 1 407 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 408 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 409 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 410 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 413 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 414 "1"
d G "ADC_READ_ONLY" 1 415 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 421 "sint8" `206 
f B "abs" 1 421 "sint8(sint8 x)" `205 
v L "x" 1 422 "sint16" `208 
f G "abs" 1 422 "sint16(sint16 x)" `207 
v L "x" 1 423 "sint32" `210 
f G "abs" 1 423 "sint32(sint32 x)" `209 
v L "x" 1 424 "float" `212 
f G "abs" 1 424 "float(float x)" `211 
v L "??65535" 1 425 "int8" `214 
v L "??65535" 1 425 "int8" `215 
f B "_mul" 1 425 "int16(int8 ,int8 )" `213 
v L "??65535" 1 426 "sint8" `214 
v L "??65535" 1 426 "sint8" `218 
f G "_mul" 1 426 "sint16(sint8 ,sint8 )" `216 
v L "??65535" 1 427 "int16" `214 
v L "??65535" 1 427 "int16" `221 
f G "_mul" 1 427 "int32(int16 ,int16 )" `219 
v L "??65535" 1 428 "sint16" `214 
v L "??65535" 1 428 "sint16" `224 
f G "_mul" 1 428 "sint32(sint16 ,sint16 )" `222  "Memory Manipulation Prototypes:"
v L "bank" 1 431 "int8" `226 
v L "offset" 1 431 "int8" `227 
f B "read_bank" 1 431 "int8(int8 bank,int8 offset)" `225 
v L "bank" 1 432 "int8" `229 
v L "offset" 1 432 "int8" `230 
v L "value" 1 432 "int8" `231 
f B "write_bank" 1 432 "void(int8 bank,int8 offset,int8 value)" `228 
v L "dest" 1 433 "*int8" `233 
v L "src" 1 433 "*int8" `234 
f B "strcpy" 1 433 "void(*int8 dest,*int8 src)" `232 
v L "dest" 1 434 "*int8" `236 
v L "src" 1 434 "*int8" `237 
f B "strcopy" 1 434 "void(*int8 dest,*int8 src)" `235 
v L "destination" 1 435 "*int8" `239 
v L "value" 1 435 "int8" `240 
v L "num" 1 435 "int16" `241 
f B "memset" 1 435 "void(*int8 destination,int8 value,int16 num)" `238 
v L "destination" 1 436 "*int8" `243 
v L "source" 1 436 "*int8" `244 
v L "num" 1 436 "int16" `245 
f B "memcpy" 1 436 "void(*int8 destination,*int8 source,int16 num)" `242  "String Prototypes:"
v L "cvalue" 1 439 "int8" `247 
f B "toupper" 1 439 "int8(int8 cvalue)" `246 
v L "cvalue" 1 440 "int8" `249 
f B "tolower" 1 440 "int8(int8 cvalue)" `248 
v L "string" 1 441 "*int8" `251 
v L "cstring" 1 441 "*int8" `252 
f B "sprintf" 1 441 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `250  "Data Manipulators Prototypes:"
v L "address" 1 444 "*int8" `255 
v L "bytes" 1 444 "int8" `256 
v L "value" 1 444 "int8" `257 
f B "shift_left" 1 444 "int8(*int8 address,int8 bytes,int8 value)" `254 
v L "address" 1 445 "*int8" `259 
v L "bytes" 1 445 "int8" `260 
v L "value" 1 445 "int8" `261 
f B "shift_right" 1 445 "int8(*int8 address,int8 bytes,int8 value)" `258 
v L "address" 1 446 "*int8" `263 
v L "bytes" 1 446 "int8" `264 
f B "rotate_left" 1 446 "void(*int8 address,int8 bytes)" `262 
v L "address" 1 447 "*int8" `266 
v L "bytes" 1 447 "int8" `267 
f B "rotate_right" 1 447 "void(*int8 address,int8 bytes)" `265 
v L "value" 1 448 "int8" `269 
f B "swap" 1 448 "void(int8 value)" `268 
v L "var" 1 449 "int16" `271 
v L "offset" 1 449 "int8" `272 
f B "make8" 1 449 "int8(int16 var,int8 offset)" `270 
v L "var" 1 450 "int32" `271 
v L "offset" 1 450 "int8" `275 
f G "make8" 1 450 "int8(int32 var,int8 offset)" `273 
v L "varhigh" 1 451 "int8" `277 
v L "varlow" 1 451 "int8" `278 
f B "make16" 1 451 "int16(int8 varhigh,int8 varlow)" `276 
v L "var1" 1 452 "int16" `280 
f B "make32" 1 452 "int32(int16 var1)" `279 
v L "var1" 1 453 "int16" `282 
v L "var2" 1 453 "int16" `283 
f G "make32" 1 453 "int32(int16 var1,int16 var2)" `281 
v L "var1" 1 454 "int16" `282 
v L "var2" 1 454 "int8" `286 
f G "make32" 1 454 "int32(int16 var1,int8 var2)" `284 
v L "var1" 1 455 "int16" `288 
v L "var2" 1 455 "int8" `289 
v L "var3" 1 455 "int8" `290 
f G "make32" 1 455 "int32(int16 var1,int8 var2,int8 var3)" `287 
v L "var1" 1 456 "int8" `292 
f G "make32" 1 456 "int32(int8 var1)" `291 
v L "var1" 1 457 "int8" `282 
v L "var2" 1 457 "int8" `295 
f G "make32" 1 457 "int32(int8 var1,int8 var2)" `293 
v L "var1" 1 458 "int8" `288 
v L "var2" 1 458 "int8" `289 
v L "var3" 1 458 "int8" `299 
f G "make32" 1 458 "int32(int8 var1,int8 var2,int8 var3)" `296 
v L "var1" 1 459 "int8" `301 
v L "var2" 1 459 "int8" `302 
v L "var3" 1 459 "int8" `303 
v L "var4" 1 459 "int8" `304 
f G "make32" 1 459 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `300 
v L "var1" 1 460 "int8" `282 
v L "var2" 1 460 "int16" `307 
f G "make32" 1 460 "int32(int8 var1,int16 var2)" `305 
v L "var1" 1 461 "int8" `288 
v L "var2" 1 461 "int16" `289 
v L "var3" 1 461 "int8" `311 
f G "make32" 1 461 "int32(int8 var1,int16 var2,int8 var3)" `308 
v L "var1" 1 462 "int8" `288 
v L "var2" 1 462 "int8" `289 
v L "var3" 1 462 "int16" `315 
f G "make32" 1 462 "int32(int8 var1,int8 var2,int16 var3)" `312 
v L "var" 1 463 "int8" `317 
v L "bit" 1 463 "int8" `318 
f B "bit_set" 1 463 "void(int8 var,int8 bit)" `316 
v L "var" 1 464 "int16" `317 
v L "bit" 1 464 "int8" `321 
f G "bit_set" 1 464 "void(int16 var,int8 bit)" `319 
v L "var" 1 465 "int32" `317 
v L "bit" 1 465 "int8" `324 
f G "bit_set" 1 465 "void(int32 var,int8 bit)" `322 
v L "var" 1 466 "int8" `326 
v L "bit" 1 466 "int8" `327 
f B "bit_clear" 1 466 "void(int8 var,int8 bit)" `325 
v L "var" 1 467 "int16" `326 
v L "bit" 1 467 "int8" `330 
f G "bit_clear" 1 467 "void(int16 var,int8 bit)" `328 
v L "var" 1 468 "int32" `326 
v L "bit" 1 468 "int8" `333 
f G "bit_clear" 1 468 "void(int32 var,int8 bit)" `331 
v L "var" 1 469 "int8" `335 
v L "bit" 1 469 "int8" `336 
f B "bit_test" 1 469 "int8(int8 var,int8 bit)" `334 
v L "var" 1 470 "int16" `335 
v L "bit" 1 470 "int8" `339 
f G "bit_test" 1 470 "int8(int16 var,int8 bit)" `337 
v L "var" 1 471 "int32" `335 
v L "bit" 1 471 "int8" `342 
f G "bit_test" 1 471 "int8(int32 var,int8 bit)" `340  "#use delay() Prototypes:"
v L "count" 1 474 "int8" `344 
f B "delay_cycles" 1 474 "void(int8 count)" `343 
v L "time" 1 475 "int16" `346 
f B "delay_ms" 1 475 "void(int16 time)" `345 
v L "time" 1 476 "int16" `348 
f B "delay_us" 1 476 "void(int16 time)" `347  "#use rs232() Prototypes:"
v L "cdata" 1 479 "int8" `350 
f B "putchar" 1 479 "void(int8 cdata)" `349 
v L "cdata" 1 480 "int8" `352 
v L "stream" 1 480 "int8" `353 
f G "putchar" 1 480 "void(int8 cdata,int8 stream)" `351 
v L "string" 1 481 "*int8" `355 
f B "puts" 1 481 "void(*int8 string)" `354 
v L "string" 1 482 "*int8" `357 
v L "stream" 1 482 "int8" `358 
f G "puts" 1 482 "void(*int8 string,int8 stream)" `356 
f B "getch" 1 483 "int8()" `359 
v L "stream" 1 484 "int8" `361 
f G "getch" 1 484 "int8(int8 stream)" `360 
v L "string" 1 485 "*int8" `363 
f B "gets" 1 485 "void(*int8 string)" `362 
v L "string" 1 486 "*int8" `365 
v L "stream" 1 486 "int8" `366 
f G "gets" 1 486 "void(*int8 string,int8 stream)" `364 
f B "kbhit" 1 487 "int8()" `367 
v L "stream" 1 488 "int8" `369 
f G "kbhit" 1 488 "int8(int8 stream)" `368 
v L "string" 1 489 "*int8" `371 
f B "printf" 1 489 "void(*int8 string,*int8 _VA_LIST)" `370 
v L "stream" 1 490 "int8" `374 
v L "string" 1 490 "*int8" `375 
f B "fprintf" 1 490 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `373 
f B "putc_send" 1 491 "void()" `377 
v L "stream" 1 492 "int8" `379 
f B "fputc_send" 1 492 "void(int8 stream)" `378 
f B "rcv_buffer_full" 1 493 "int8()" `380 
v L "stream" 1 494 "int8" `382 
f G "rcv_buffer_full" 1 494 "int8(int8 stream)" `381 
f B "rcv_buffer_bytes" 1 495 "int16()" `383 
v L "stream" 1 496 "int8" `385 
f G "rcv_buffer_bytes" 1 496 "int16(int8 stream)" `384 
f B "tx_buffer_full" 1 497 "int8()" `386 
v L "stream" 1 498 "int8" `388 
f G "tx_buffer_full" 1 498 "int8(int8 stream)" `387 
f B "tx_buffer_bytes" 1 499 "int16()" `389 
v L "stream" 1 500 "int8" `391 
f G "tx_buffer_bytes" 1 500 "int16(int8 stream)" `390  "#use i2c() Prototypes:"
f B "i2c_read" 1 503 "int8()" `392 
v L "stream" 1 504 "int8" `394 
f G "i2c_read" 1 504 "int8(int8 stream)" `393 
v L "stream" 1 505 "int8" `396 
v L "ack" 1 505 "int8" `397 
f G "i2c_read" 1 505 "int8(int8 stream,int8 ack)" `395 
v L "data" 1 506 "int8" `399 
f B "i2c_write" 1 506 "int8(int8 data)" `398 
v L "stream" 1 507 "int8" `401 
v L "data" 1 507 "int8" `402 
f G "i2c_write" 1 507 "int8(int8 stream,int8 data)" `400 
f B "i2c_start" 1 508 "void()" `403 
v L "stream" 1 509 "int8" `405 
f G "i2c_start" 1 509 "void(int8 stream)" `404 
v L "stream" 1 510 "int8" `407 
v L "restart" 1 510 "int8" `408 
f G "i2c_start" 1 510 "void(int8 stream,int8 restart)" `406 
f B "i2c_stop" 1 511 "void()" `409 
v L "stream" 1 512 "int8" `411 
f G "i2c_stop" 1 512 "void(int8 stream)" `410 
f B "i2c_isr_state" 1 513 "int8()" `412 
v L "addr" 1 514 "int8" `414 
f B "i2c_slaveaddr" 1 514 "void(int8 addr)" `413 
v L "stream" 1 515 "int8" `416 
v L "addr" 1 515 "int8" `417 
f G "i2c_slaveaddr" 1 515 "void(int8 stream,int8 addr)" `415 
f B "i2c_poll" 1 516 "int8()" `418 
v L "stream" 1 517 "int8" `420 
f G "i2c_poll" 1 517 "int8(int8 stream)" `419 
v L "baud" 1 518 "int32" `422 
f B "i2c_init" 1 518 "void(int32 baud)" `421 
v L "stream" 1 519 "int8" `424 
v L "baud" 1 519 "int32" `425 
f G "i2c_init" 1 519 "void(int8 stream,int32 baud)" `423  "#use spi() Prototypes:"
f B "spi_xfer" 1 522 "int8()" `426 
f G "spi_xfer" 1 523 "int16()" `427 
f G "spi_xfer" 1 524 "int32()" `428 
v L "data" 1 525 "int8" `430 
f G "spi_xfer" 1 525 "int8(int8 data)" `429 
v L "data" 1 526 "int16" `432 
f G "spi_xfer" 1 526 "int16(int16 data)" `431 
v L "data" 1 527 "int32" `434 
f G "spi_xfer" 1 527 "int32(int32 data)" `433 
v L "stream" 1 528 "int8" `436 
v L "data" 1 528 "int8" `437 
f G "spi_xfer" 1 528 "int8(int8 stream,int8 data)" `435 
v L "stream" 1 529 "int8" `436 
v L "data" 1 529 "int16" `440 
f G "spi_xfer" 1 529 "int16(int8 stream,int16 data)" `438 
v L "stream" 1 530 "int8" `436 
v L "data" 1 530 "int32" `443 
f G "spi_xfer" 1 530 "int32(int8 stream,int32 data)" `441 
v L "stream" 1 531 "int8" `445 
v L "data" 1 531 "int8" `446 
v L "bits" 1 531 "int8" `447 
f G "spi_xfer" 1 531 "int8(int8 stream,int8 data,int8 bits)" `444 
v L "stream" 1 532 "int8" `445 
v L "data" 1 532 "int16" `446 
v L "bits" 1 532 "int8" `451 
f G "spi_xfer" 1 532 "int16(int8 stream,int16 data,int8 bits)" `448 
v L "stream" 1 533 "int8" `445 
v L "data" 1 533 "int32" `446 
v L "bits" 1 533 "int8" `455 
f G "spi_xfer" 1 533 "int32(int8 stream,int32 data,int8 bits)" `452 
v L "baud" 1 534 "int32" `457 
f B "spi_init" 1 534 "void(int32 baud)" `456 
v L "stream" 1 535 "int8" `459 
v L "baud" 1 535 "int32" `460 
f G "spi_init" 1 535 "void(int8 stream,int32 baud)" `458 
v L "baud" 1 536 "int32" `462 
f B "spi_speed" 1 536 "void(int32 baud)" `461 
v L "stream" 1 537 "int8" `464 
v L "baud" 1 537 "int32" `465 
f G "spi_speed" 1 537 "void(int8 stream,int32 baud)" `463 
v L "stream" 1 538 "int8" `467 
v L "baud" 1 538 "int32" `468 
v L "clock" 1 538 "int32" `469 
f G "spi_speed" 1 538 "void(int8 stream,int32 baud,int32 clock)" `466 
v L "data" 1 539 "int8" `471 
f B "spi_prewrite" 1 539 "void(int8 data)" `470 
v L "data" 1 540 "int16" `473 
f G "spi_prewrite" 1 540 "void(int16 data)" `472 
v L "data" 1 541 "int32" `475 
f G "spi_prewrite" 1 541 "void(int32 data)" `474 
v L "??65535" 1 542 "int8" `477 
v L "data" 1 542 "int8" `478 
f G "spi_prewrite" 1 542 "void(int8 ,int8 data)" `476 
v L "??65535" 1 543 "int8" `477 
v L "data" 1 543 "int16" `481 
f G "spi_prewrite" 1 543 "void(int8 ,int16 data)" `479 
v L "??65535" 1 544 "int8" `477 
v L "data" 1 544 "int32" `484 
f G "spi_prewrite" 1 544 "void(int8 ,int32 data)" `482 
f B "spi_xfer_in" 1 545 "int8()" `485 
f G "spi_xfer_in" 1 546 "int16()" `486 
f G "spi_xfer_in" 1 547 "int32()" `487 
v L "bits" 1 548 "int8" `489 
f G "spi_xfer_in" 1 548 "int8(int8 bits)" `488 
v L "bits" 1 549 "int8" `491 
f G "spi_xfer_in" 1 549 "int16(int8 bits)" `490 
v L "bits" 1 550 "int8" `493 
f G "spi_xfer_in" 1 550 "int32(int8 bits)" `492 
v L "stream" 1 551 "int8" `495 
v L "bits" 1 551 "int8" `496 
f G "spi_xfer_in" 1 551 "int8(int8 stream,int8 bits)" `494 
v L "stream" 1 552 "int8" `495 
v L "bits" 1 552 "int8" `499 
f G "spi_xfer_in" 1 552 "int16(int8 stream,int8 bits)" `497 
v L "stream" 1 553 "int8" `495 
v L "bits" 1 553 "int8" `502 
f G "spi_xfer_in" 1 553 "int32(int8 stream,int8 bits)" `500  "#use rtos() Prototypes:"
f B "rtos_run" 1 556 "void()" `503 
f B "rtos_yield" 1 557 "void()" `504 
v L "task" 1 558 "int8" `506 
f B "rtos_enable" 1 558 "void(int8 task)" `505 
v L "task" 1 559 "int8" `508 
f B "rtos_disable" 1 559 "void(int8 task)" `507 
f B "rtos_terminate" 1 560 "void()" `509 
v L "flag" 1 561 "int8" `511 
f B "rtos_await" 1 561 "void(int8 flag)" `510 
v L "sem" 1 562 "int8" `513 
f B "rtos_wait" 1 562 "void(int8 sem)" `512 
v L "sem" 1 563 "int8" `515 
f B "rtos_signal" 1 563 "void(int8 sem)" `514 
v L "task" 1 564 "int8" `517 
v L "msg" 1 564 "int8" `518 
f B "rtos_msg_send" 1 564 "void(int8 task,int8 msg)" `516 
f B "rtos_msg_read" 1 565 "int8()" `519 
f B "rtos_msg_poll" 1 566 "int8()" `520 
v L "task" 1 567 "int8" `522 
f B "rtos_overrun" 1 567 "int8(int8 task)" `521 
v L "task" 1 568 "int8" `524 
v L "stat" 1 568 "*int8" `525 
f B "rtos_stats" 1 568 "void(int8 task,*int8 stat)" `523  "#use timer() Prototypes:"
f B "get_ticks" 1 571 "int8()" `526 
f G "get_ticks" 1 572 "int16()" `527 
f G "get_ticks" 1 573 "int32()" `528 
v L "stream" 1 574 "int8" `530 
f G "get_ticks" 1 574 "int8(int8 stream)" `529 
v L "stream" 1 575 "int8" `532 
f G "get_ticks" 1 575 "int16(int8 stream)" `531 
v L "stream" 1 576 "int8" `534 
f G "get_ticks" 1 576 "int32(int8 stream)" `533 
v L "value" 1 577 "int8" `536 
f B "set_ticks" 1 577 "void(int8 value)" `535 
v L "value" 1 578 "int16" `538 
f G "set_ticks" 1 578 "void(int16 value)" `537 
v L "value" 1 579 "int32" `540 
f G "set_ticks" 1 579 "void(int32 value)" `539 
v L "stream" 1 580 "int8" `542 
v L "value" 1 580 "int8" `543 
f G "set_ticks" 1 580 "void(int8 stream,int8 value)" `541 
v L "stream" 1 581 "int8" `542 
v L "value" 1 581 "int16" `546 
f G "set_ticks" 1 581 "void(int8 stream,int16 value)" `544 
v L "stream" 1 582 "int8" `542 
v L "value" 1 582 "int32" `549 
f G "set_ticks" 1 582 "void(int8 stream,int32 value)" `547  "#use pwm() Prototypes:"
f B "pwm_on" 1 585 "void()" `550 
v L "stream" 1 586 "int8" `552 
f G "pwm_on" 1 586 "void(int8 stream)" `551 
f B "pwm_off" 1 587 "void()" `553 
v L "stream" 1 588 "int8" `555 
f G "pwm_off" 1 588 "void(int8 stream)" `554 
v L "duty" 1 589 "int16" `557 
f B "pwm_set_duty" 1 589 "void(int16 duty)" `556 
v L "stream" 1 590 "int8" `559 
v L "duty" 1 590 "int16" `560 
f G "pwm_set_duty" 1 590 "void(int8 stream,int16 duty)" `558 
v L "percent" 1 591 "int16" `562 
f B "pwm_set_duty_percent" 1 591 "void(int16 percent)" `561 
v L "stream" 1 592 "int8" `564 
v L "percent" 1 592 "int16" `565 
f G "pwm_set_duty_percent" 1 592 "void(int8 stream,int16 percent)" `563 
v L "frequency" 1 593 "int32" `567 
f B "pwm_set_frequency" 1 593 "void(int32 frequency)" `566 
v L "stream" 1 594 "int8" `569 
v L "frequency" 1 594 "int32" `570 
f G "pwm_set_frequency" 1 594 "void(int8 stream,int32 frequency)" `568  "#use capture() Prototypes:"
f B "get_capture_time" 1 597 "int16()" `571 
v L "stream" 1 598 "int8" `573 
f G "get_capture_time" 1 598 "int16(int8 stream)" `572 
f B "get_capture_event" 1 599 "int8()" `574 
v L "stream" 1 600 "int8" `576 
f G "get_capture_event" 1 600 "int8(int8 stream)" `575  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 613 "int16" `578 
f B "goto_address" 1 613 "void(int16 address)" `577 
v L "label" 1 614 "int16" `580 
f B "label_address" 1 614 "int16(int16 label)" `579  "Program Memory Prototypes:"
v L "address" 1 617 "int16" `582 
v L "dataptr" 1 617 "*int8" `583 
v L "count" 1 617 "int16" `584 
f B "read_program_memory" 1 617 "void(int16 address,*int8 dataptr,int16 count)" `581 
v L "address" 1 618 "int16" `586 
f B "read_program_eeprom" 1 618 "int16(int16 address)" `585 
v L "address" 1 619 "int16" `588 
f B "erase_program_eeprom" 1 619 "void(int16 address)" `587 
v L "address" 1 620 "int16" `590 
v L "dataptr" 1 620 "*int8" `591 
v L "count" 1 620 "int16" `592 
f B "write_program_memory" 1 620 "void(int16 address,*int8 dataptr,int16 count)" `589 
v L "address" 1 621 "int16" `594 
v L "data" 1 621 "int16" `595 
f B "write_program_eeprom" 1 621 "void(int16 address,int16 data)" `593  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 626 "int16" `596 
v L "address" 1 631 "__EEADDRESS__" `598 
f B "read_eeprom" 1 631 "int8(__EEADDRESS__ address)" `597 
v L "address" 1 632 "__EEADDRESS__" `600 
v L "value" 1 632 "int8" `601 
f B "write_eeprom" 1 632 "void(__EEADDRESS__ address,int8 value)" `599  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 639 "int32" `603 
f B "enable_interrupts" 1 639 "void(int32 interrupt)" `602 
v L "interrupt" 1 640 "int32" `605 
f B "disable_interrupts" 1 640 "void(int32 interrupt)" `604 
v L "interrupt" 1 641 "int32" `607 
f B "clear_interrupt" 1 641 "void(int32 interrupt)" `606 
v L "interrupt" 1 642 "int32" `609 
f B "interrupt_active" 1 642 "int8(int32 interrupt)" `608 
v L "interrupt" 1 643 "int32" `611 
f B "interrupt_enabled" 1 643 "int8(int32 interrupt)" `610 
v L "source" 1 644 "int8" `613 
v L "edge" 1 644 "int8" `614 
f B "ext_int_edge" 1 644 "void(int8 source,int8 edge)" `612 
v L "address" 1 645 "int16" `616 
f B "jump_to_isr" 1 645 "void(int16 address)" `615  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 647 "0x40"
d G "H_TO_L" 1 648 "0"
d G "GLOBAL" 1 650 "0x0BC0"
d G "PERIPH" 1 651 "0x0B40"
d G "INT_RTCC" 1 652 "0x000B20"
d G "INT_RB" 1 653 "0x00FF0B08"
d G "INT_EXT_L2H" 1 654 "0x50000B10"
d G "INT_EXT_H2L" 1 655 "0x60000B10"
d G "INT_EXT" 1 656 "0x000B10"
d G "INT_AD" 1 657 "0x008C40"
d G "INT_TBE" 1 658 "0x008C10"
d G "INT_RDA" 1 659 "0x008C20"
d G "INT_TIMER1" 1 660 "0x008C01"
d G "INT_TIMER2" 1 661 "0x008C02"
d G "INT_CCP1" 1 662 "0x008C04"
d G "INT_CCP2" 1 663 "0x008D01"
d G "INT_SSP" 1 664 "0x008C08"
d G "INT_PSP" 1 665 "0x008C80"
d G "INT_BUSCOL" 1 666 "0x008D08"
d G "INT_EEPROM" 1 667 "0x008D10"
d G "INT_TIMER0" 1 668 "0x000B20"
d G "INT_COMP" 1 669 "0x008D40"
D G "LCD_ENABLE_PIN" 2 57 "PIN_E0"
D G "LCD_RS_PIN" 2 58 "PIN_E1"
D G "LCD_RW_PIN" 2 59 "PIN_E2"
D G "LCD_DATA4" 2 60 "PIN_D4"
D G "LCD_DATA5" 2 61 "PIN_D5"
D G "LCD_DATA6" 2 62 "PIN_D6"
D G "LCD_DATA7" 2 63 "PIN_D7" "////"
D G "__LCD_C__" 2 76 ""
C L "jump_to_isr" 2 2 2 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `627  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 2 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 2 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 2 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 2 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 2 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
f G "lcd_read_nibble" 2 190 "int8()" `628 
F G "lcd_read_byte" 2 193 "int8()" `629 
V L "low" 2 194 "int8" `630 
V L "high" 2 194 "int8" `631 
F G "lcd_read_nibble" 2 240 "int8()" `628 
V L "n" 2 242 "int8" `632 
C L "lcd_read_nibble" 2 2 1 "FUNCTION"
V L "n" 2 256 "int8" `634 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `633 
C L "lcd_send_nibble" 2 2 1 "FUNCTION"
V L "address" 2 274 "int8" `636 
V L "n" 2 274 "int8" `637 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `635 
F G "lcd_init" 2 300 "void()" `638 
V L "i" 2 301 "int8" `639 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `640 
C L "lcd_init" 2 2 2 "FUNCTION"
V L "x" 2 345 "int8" `642 
V L "y" 2 345 "int8" `643 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `641 
V L "address" 2 347 "int8" `644 
V L "c" 2 363 "int8" `646 
F G "lcd_putc" 2 364 "void(int8 c)" `645 
V L "x" 2 406 "int8" `648 
V L "y" 2 406 "int8" `649 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `647 
V L "value" 2 408 "int8" `650 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
V L "which" 2 424 "int8" `652 
V L "ptr" 2 424 "*int8" `653 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `651 
V L "i" 2 426 "int8" `654 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
V L "on" 2 443 "int8" `656 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `655 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
D G "_STDLIB" 3 12 ""
D G "RAND_MAX" 3 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 25 "1"
T G "div_t" 3 33 "{sint8 quot,sint8 rem}" `660 
T G "ldiv_t" 3 38 "{sint16 quot,sint16 rem}" `664  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 3 43 2 "FUNCTION"
C L "atoi" 3 46 1 "*"
C L "atoi" 3 46 1 "*"
V L "s" 3 50 "*int8" `666 
f G "atoi" 3 50 "sint8(*int8 s)" `665  "Syntax: signed int32  atoi32(char * s)"
V L "s" 3 58 "*int8" `668 
f G "atoi32" 3 58 "sint32(*int8 s)" `667  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 46 2 "FUNCTION"
V L "num" 3 79 "sint32" `670 
V L "base" 3 79 "int8" `671 
V L "s" 3 79 "*int8" `672 
f G "itoa" 3 79 "*int8(sint32 num,int8 base,*int8 s)" `669  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 81 1 "*"
C L "itoa" 3 81 1 "*"
V L "s" 3 85 "*int8" `674 
f G "atol" 3 85 "sint16(*int8 s)" `673  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
V L "s" 3 93 "*int8" `676 
V L "endptr" 3 93 "*int8" `677 
V L "base" 3 93 "sint8" `678 
f G "strtol" 3 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `675  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
V L "s" 3 101 "*int8" `680 
V L "endptr" 3 101 "*int8" `681 
V L "base" 3 101 "sint8" `682 
f G "strtoul" 3 101 "int16(*int8 s,*int8 endptr,sint8 base)" `679  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 95 2 "FUNCTION"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
V L "s" 3 110 "*int8" `684 
V L "endptr" 3 110 "*int8" `685 
f G "strtof" 3 110 "float(*int8 s,*int8 endptr)" `683  "provided for compatibility"
D G "strtof48" 3 116 "(s,e) strtof(s, e)"
D G "strtod" 3 117 "(s,e) strtof(s, e)"
C L "strtof" 3 103 1 "FUNCTION"
C L "strtof" 3 120 1 "*"
D G "atof" 3 124 "(s)   strtof(s, 0)"
C L "strtof" 3 120 1 "FUNCTION"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
V L "s" 3 149 "*int8" `687 
f G "atoe" 3 149 "float(*int8 s)" `686  "Pseudo-random sequence generation functions"
C L "atoe" 3 143 1 "FUNCTION"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
f G "rand" 3 169 "int16()" `688  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
V L "seed" 3 191 "int32" `690 
f G "srand" 3 191 "void(int32 seed)" `689  "Memory management functions"
C L "srand" 3 171 3 "FUNCTION"
V L "string" 3 205 "*int8" `692 
f G "system" 3 205 "sint8(*int8 string)" `691  "Searching and sorting utilities"
C L "system" 3 171 1 "FUNCTION"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 4 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
D G "labs" 3 249 "abs"
V L "numer" 3 251 "sint8" `694 
V L "denom" 3 251 "sint8" `695 
f G "div" 3 251 "div_t(sint8 numer,sint8 denom)" `693 
V L "numer" 3 252 "sint16" `697 
V L "denom" 3 252 "sint16" `698 
f G "ldiv" 3 252 "ldiv_t(sint16 numer,sint16 denom)" `696  "Multibyte character functions"
C L "ldiv" 3 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `700 
V L "s2" 5 34 "*int8" `701 
V L "n" 5 34 "int16" `702 
F G "memmove" 5 35 "*int8(*int8 s1,*int8 s2,int16 n)" `699 
V L "sc1" 5 36 "*int8" `703 
V L "sc2" 5 37 "*int8" `704 
D G "strcopy" 5 54 "strcpy"
V L "s1" 5 61 "*int8" `706 
V L "s2" 5 61 "*int8" `707 
V L "n" 5 61 "int16" `708 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `705 
V L "s" 5 63 "*int8" `709 
V L "s1" 5 78 "*int8" `711 
V L "s2" 5 78 "*int8" `712 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `710 
V L "s" 5 80 "*int8" `713 
V L "s1" 5 96 "*int8" `715 
V L "s2" 5 96 "*int8" `716 
V L "n" 5 96 "int16" `717 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `714 
V L "s" 5 98 "*int8" `718 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `720 
V L "s2" 5 120 "*int8" `721 
V L "n" 5 120 "int16" `722 
F G "memcmp" 5 121 "sint8(*int8 s1,*int8 s2,int16 n)" `719 
V L "su1" 5 122 "*int8" `723 
V L "su2" 5 122 "*int8" `724 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*int8" `726 
V L "s2" 5 134 "*int8" `727 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `725 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*int8" `729 
V L "s2" 5 144 "*int8" `730 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `728 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*int8" `732 
V L "s2" 5 157 "*int8" `733 
V L "n" 5 157 "int16" `734 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `731 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*int8" `736 
V L "s2" 5 169 "*int8" `737 
V L "n" 5 169 "int16" `738 
F G "strxfrm" 5 170 "int16(*int8 s1,*int8 s2,int16 n)" `735 
V L "s" 5 171 "*int8" `739 
V L "n1" 5 172 "int8" `740 
V L "s" 5 191 "*int8" `742 
V L "c" 5 191 "int8" `743 
V L "n" 5 191 "int16" `744 
F G "memchr" 5 192 "*int8(*int8 s,int8 c,int16 n)" `741 
V L "uc" 5 193 "int8" `745 
V L "su" 5 194 "*int8" `746 
V L "s" 5 205 "*int8" `748 
V L "c" 5 205 "int8" `749 
F G "strchr" 5 206 "*int8(*int8 s,int8 c)" `747 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*int8" `751 
V L "s2" 5 217 "*int8" `752 
F G "strcspn" 5 218 "int8(*int8 s1,*int8 s2)" `750 
V L "sc1" 5 219 "*int8" `753 
V L "sc2" 5 219 "*int8" `754 
V L "s1" 5 232 "*int8" `756 
V L "s2" 5 232 "*int8" `757 
F G "strpbrk" 5 233 "*int8(*int8 s1,*int8 s2)" `755 
V L "sc1" 5 234 "*int8" `758 
V L "sc2" 5 234 "*int8" `759 
V L "s" 5 247 "*int8" `761 
V L "c" 5 247 "int8" `762 
F G "strrchr" 5 248 "*int8(*int8 s,int8 c)" `760 
V L "p" 5 249 "*int8" `763 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*int8" `765 
V L "s2" 5 262 "*int8" `766 
F G "strspn" 5 263 "int8(*int8 s1,*int8 s2)" `764 
V L "sc1" 5 264 "*int8" `767 
V L "sc2" 5 264 "*int8" `768 
V L "s1" 5 281 "*int8" `770 
V L "s2" 5 281 "*int8" `771 
F G "strstr" 5 282 "*int8(*int8 s1,*int8 s2)" `769 
V L "s" 5 283 "*int8" `772 
V L "t" 5 283 "*int8" `773 
V L "s1" 5 320 "*int8" `775 
V L "s2" 5 320 "*int8" `776 
F G "strtok" 5 321 "*int8(*int8 s1,*int8 s2)" `774 
V L "beg" 5 322 "*int8" `777 
V L "end" 5 322 "*int8" `778 
V L "save" 5 323 "*int8" `779 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*int8" `781 
F G "strlen" 5 370 "int8(*int8 s)" `780 
V L "sc" 5 371 "*int8" `782 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*int8" `784 
V L "s2" 5 380 "*int8" `785 
F G "stricmp" 5 381 "sint8(*int8 s1,*int8 s2)" `783 
V L "s" 5 394 "*int8" `789 
F G "strlwr" 5 395 "*int8(*int8 s)" `788 
V L "p" 5 396 "*int8" `790 
V L "s" 5 408 "*int8" `792 
F G "strupr" 5 409 "*int8(*int8 s)" `791 
V L "p" 5 410 "*int8" `793 
V L "numer" 3 274 "sint8" `694 
V L "denom" 3 274 "sint8" `796 
F G "div" 3 275 "div_t(sint8 numer,sint8 denom)" `693 
V L "val" 3 276 "div_t" `794 
V L "numer" 3 282 "sint16" `697 
V L "denom" 3 282 "sint16" `803 
F G "ldiv" 3 283 "ldiv_t(sint16 numer,sint16 denom)" `696 
V L "val" 3 284 "ldiv_t" `801 
V L "s" 3 361 "*int8" `809 
F G "atoe" 3 362 "float(*int8 s)" `686 
V L "pow10" 3 363 "float" `808 
V L "result" 3 364 "float" `809 
V L "sign" 3 365 "int8" `810 
V L "expsign" 3 366 "int8" `811 
V L "c" 3 367 "int8" `812 
V L "ptr" 3 368 "int8" `813 
V L "i" 3 369 "int8" `814 
V L "exp" 3 370 "float" `815 
V L "expcnt" 3 371 "int8" `816 
C L "atoe" 3 397 1 "FUNCTION"
V L "s" 3 429 "*int8" `829 
F G "atoi" 3 430 "sint8(*int8 s)" `665 
V L "result" 3 431 "sint8" `828 
V L "sign" 3 432 "int8" `829 
V L "base" 3 432 "int8" `830 
V L "index" 3 432 "int8" `831 
V L "c" 3 433 "int8" `832 
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
V L "s" 3 498 "*int8" `834 
F G "atol" 3 499 "sint16(*int8 s)" `673 
V L "result" 3 500 "sint16" `833 
V L "sign" 3 501 "int8" `834 
V L "base" 3 501 "int8" `835 
V L "index" 3 501 "int8" `836 
V L "c" 3 502 "int8" `837 
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "mult_with10" 3 397 1 "FUNCTION"
V L "num" 3 565 "int32" `839 
F G "mult_with10" 3 566 "sint32(int32 num)" `838 
V L "s" 3 571 "*int8" `841 
F G "atoi32" 3 572 "sint32(*int8 s)" `667 
V L "result" 3 573 "sint32" `840 
V L "sign" 3 574 "int8" `841 
V L "base" 3 574 "int8" `842 
V L "index" 3 574 "int8" `843 
V L "c" 3 575 "int8" `844 
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
V L "num" 3 770 "sint32" `670 
V L "base" 3 770 "int8" `671 
V L "s" 3 770 "*int8" `848 
F G "itoa" 3 771 "*int8(sint32 num,int8 base,*int8 s)" `669 
V L "temp" 3 772 "int32" `845 
V L "i" 3 773 "int8" `846 
V L "sign" 3 773 "int8" `847 
V L "cnt" 3 773 "int8" `848 
V L "c" 3 774 "int8" `849 
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
V L "s" 3 885 "*int8" `684 
V L "endptr" 3 885 "*int8" `858 
F G "strtof" 3 886 "float(*int8 s,*int8 endptr)" `683 
V L "pow10" 3 887 "float" `856 
V L "result" 3 888 "float" `857 
V L "skip" 3 889 "int1" `858 
V L "sign" 3 889 "int1" `859 
V L "point" 3 889 "int1" `860 
V L "c" 3 890 "int8" `861 
V L "ptr" 3 891 "int8" `862 
V L "s" 3 1103 "*int8" `680 
V L "endptr" 3 1103 "*int8" `681 
V L "base" 3 1103 "sint8" `867 
F G "strtoul" 3 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `679 
V L "sc" 3 1105 "*int8" `864 
V L "s1" 3 1105 "*int8" `865 
V L "sd" 3 1105 "*int8" `866 
V L "x" 3 1106 "int16" `867 
V L "sign" 3 1107 "int8" `868 
V L "digits" 3 1108 "int8[1]" `869 
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
V L "s" 3 1165 "*int8" `676 
V L "endptr" 3 1165 "*int8" `677 
V L "base" 3 1165 "sint8" `874 
F G "strtol" 3 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `675 
V L "sc" 3 1167 "*int8" `871 
V L "s1" 3 1167 "*int8" `872 
V L "sd" 3 1167 "*int8" `873 
V L "x" 3 1168 "sint16" `874 
V L "sign" 3 1169 "int8" `875 
V L "digits" 3 1170 "int8[1]" `876 
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
V L "string" 3 1228 "*int8" `879 
F G "system" 3 1229 "sint8(*int8 string)" `691 
V L "s" 3 1233 "*int8" `879 
V L "n" 3 1233 "int16" `880 
F G "mblen" 3 1234 "int8(*int8 s,int16 n)" `878 
V L "pwc" 3 1238 "*int8" `882 
V L "s" 3 1238 "*int8" `883 
V L "n" 3 1238 "int16" `884 
F G "mbtowc" 3 1239 "int8(*int8 pwc,*int8 s,int16 n)" `881 
V L "s" 3 1244 "*int8" `886 
V L "wchar" 3 1244 "int8" `887 
F G "wctomb" 3 1245 "int8(*int8 s,int8 wchar)" `885 
V L "pwcs" 3 1250 "*int8" `889 
V L "s" 3 1250 "*int8" `890 
V L "n" 3 1250 "int16" `891 
F G "mbstowcs" 3 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `888 
V L "s" 3 1256 "*int8" `893 
V L "pwcs" 3 1256 "*int8" `894 
V L "n" 3 1256 "int16" `895 
F G "wcstombs" 3 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `892 
V G "_Randseed" 3 1266 "int32" `896 
F G "rand" 3 1269 "int16()" `688 
V L "seed" 3 1274 "int32" `901 
F G "srand" 3 1275 "void(int32 seed)" `689 
V L "p1" 3 1284 "*int8" `901 
V L "p2" 3 1284 "*int8" `902 
T G "*_Cmpfun" 3 1284 "sint8(*int8 p1,*int8 p2)" `900 
V L "qdata" 3 1291 "*int8" `905 
V L "qitems" 3 1291 "int8" `906 
V L "qsize" 3 1291 "int8" `907 
V L "cmp" 3 1291 "_Cmpfun" `908 
F G "qsort" 3 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `904 
V L "m" 3 1292 "int8" `909 
V L "j" 3 1292 "int8" `910 
V L "i" 3 1292 "int8" `911 
V L "l" 3 1292 "int8" `912 
V L "done" 3 1293 "int1" `913 
V L "t" 3 1294 "int8[16]" `914 
V L "key" 3 1319 "*int8" `917 
V L "base" 3 1319 "*int8" `918 
V L "num" 3 1319 "int16" `919 
V L "width" 3 1319 "int16" `920 
V L "cmp" 3 1319 "_Cmpfun" `921 
F G "bsearch" 3 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `916 
V L "p" 3 1321 "*int8" `922 
V L "q" 3 1321 "*int8" `923 
V L "n" 3 1322 "int16" `924 
V L "pivot" 3 1323 "int16" `925 
V L "val" 3 1324 "sint8" `926 
C L "bsearch" 3 397 1 "FUNCTION"
C L "do_delay" 7 1 1 "FUNCTION"
C L "do_delay" 7 1 1 "*"
C L "do_delay" 7 1 1 "*"
C L "do_delay" 7 1 1 "*"
V L "ms_delay" 7 9 "int8" `931 
V L "num_ms" 7 9 "int8" `932 
V L "us_delay" 7 9 "int8" `933 
V L "num_us" 7 9 "int8" `934 
F G "do_delay" 7 10 "void(int8 ms_delay,int8 num_ms,int8 us_delay,int8 num_us)" `930 
V L "i" 7 11 "int8" `935 
V L "pin_tone" 7 21 "int8" `937 
V L "frequency" 7 21 "int16" `938 
V L "duration" 7 21 "int16" `939 
F G "generate_tone" 7 22 "void(int8 pin_tone,int16 frequency,int16 duration)" `936 
V L "total_delay_time" 7 23 "int32" `940 
V L "total_ms_delay_time" 7 24 "int16" `941 
V L "total_us_delay_time" 7 24 "int16" `942 
V L "num_us_delays" 7 25 "int8" `943 
V L "num_ms_delays" 7 25 "int8" `944 
V L "ms_delay_time" 7 25 "int8" `945 
V L "us_delay_time" 7 25 "int8" `946 
V L "num_periods" 7 26 "int16" `947 
D G "button" 0 11 "PIN_B0"
D G "buzzer" 0 12 "PIN_B1"
D G "vida1" 0 13 "PIN_B2"
D G "vida2" 0 14 "PIN_B3"
D G "vida3" 0 15 "PIN_B4"
V G "ctf" 0 17 "int16" `955 
V G "random" 0 19 "int8" `956 
V G "dp" 0 20 "int1" `957 
V G "st" 0 21 "int8" `958 
V G "pas" 0 22 "int1" `959 
V G "cuen" 0 23 "int8" `960 
V G "sr" 0 24 "int16" `961 
f G "lcd_init" 0 26 "int8()" `962  "---------SE GENERAN LAS FIGURAS CON CGRAM---------"
C L "lcd_init" 0 30 1 "FUNCTION"
V L "x" 0 31 "int8" `964 
V L "y" 0 31 "int8" `965 
F G "dino1" 0 32 "void(int8 x,int8 y)" `963 
V L "dinosaurio1" 0 33 "int8[8]" `966 
C L "dino1" 0 30 1 "FUNCTION"
C L "dino1" 0 30 1 "FUNCTION"
C L "dino1" 0 30 1 "FUNCTION"
C L "dino1" 0 30 1 "FUNCTION"
C L "dino2" 0 30 1 "FUNCTION"
V L "x" 0 40 "int8" `968 
V L "y" 0 40 "int8" `969 
F G "dino2" 0 41 "void(int8 x,int8 y)" `967 
V L "dinosaurio2" 0 42 "int8[8]" `970 
C L "dino2" 0 30 1 "FUNCTION"
C L "dino2" 0 30 1 "FUNCTION"
C L "dino2" 0 30 1 "FUNCTION"
C L "dino2" 0 30 1 "FUNCTION"
C L "cact1" 0 30 1 "FUNCTION"
V L "x" 0 49 "int8" `972 
V L "y" 0 49 "int8" `973 
F G "cact1" 0 50 "void(int8 x,int8 y)" `971 
V L "cactus1" 0 51 "int8[8]" `974 
C L "cact1" 0 30 1 "FUNCTION"
C L "cact1" 0 30 1 "FUNCTION"
C L "cact1" 0 30 1 "FUNCTION"
C L "cact1" 0 30 1 "FUNCTION"
C L "cact2" 0 30 1 "FUNCTION"
V L "x" 0 58 "int8" `976 
V L "y" 0 58 "int8" `977 
F G "cact2" 0 59 "void(int8 x,int8 y)" `975 
V L "cactus2" 0 60 "int8[8]" `978 
C L "cact2" 0 30 1 "FUNCTION"
C L "cact2" 0 30 1 "FUNCTION"
C L "cact2" 0 30 1 "FUNCTION"
C L "sole1" 0 30 1 "FUNCTION"
V L "x" 0 67 "int8" `980 
V L "y" 0 67 "int8" `981 
F G "sole1" 0 68 "void(int8 x,int8 y)" `979 
V L "sol1" 0 69 "int8[8]" `982 
C L "sole1" 0 30 1 "FUNCTION"
C L "sole1" 0 30 1 "FUNCTION"
C L "sole1" 0 30 1 "FUNCTION"
C L "sole2" 0 30 1 "FUNCTION"
V L "x" 0 76 "int8" `984 
V L "y" 0 76 "int8" `985 
F G "sole2" 0 77 "void(int8 x,int8 y)" `983 
V L "sol2" 0 78 "int8[8]" `986 
C L "sole2" 0 30 1 "FUNCTION"
C L "sole2" 0 30 1 "FUNCTION"
C L "sole2" 0 30 1 "FUNCTION"
F G "vel_juego" 0 85 "void()" `987  "----------------------------------------------velocidad del juego-----------------------------------------------------------------------"
C L "vel_juego" 0 30 1 "FUNCTION"
C L "vel_juego" 0 30 1 "FUNCTION"
F G "MAIN" 0 113 "void()" `988 
C L "MAIN" 0 30 2 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
V L "vida" 0 216 "int8" `1006 
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
C L "MAIN" 0 30 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
